# Generated from CASS.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
<<<<<<< HEAD
<<<<<<< HEAD
        4,1,46,342,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,1,0,4,0,72,8,0,11,0,12,0,73,1,0,1,0,1,1,1,1,1,1,1,
        1,3,1,82,8,1,1,1,1,1,1,1,1,2,1,2,5,2,89,8,2,10,2,12,2,92,9,2,1,2,
        1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,107,8,3,1,4,
        1,4,5,4,111,8,4,10,4,12,4,114,9,4,1,4,1,4,1,4,3,4,119,8,4,1,4,3,
        4,122,8,4,1,5,1,5,1,5,3,5,127,8,5,1,5,1,5,3,5,131,8,5,3,5,133,8,
        5,1,5,1,5,3,5,137,8,5,1,5,1,5,3,5,141,8,5,1,5,1,5,1,5,1,6,1,6,1,
        6,3,6,149,8,6,1,6,1,6,3,6,153,8,6,3,6,155,8,6,1,6,1,6,3,6,159,8,
        6,1,6,1,6,3,6,163,8,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,188,
        8,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,196,8,11,1,12,1,12,1,12,
        1,12,3,12,202,8,12,1,13,1,13,1,13,3,13,207,8,13,1,13,1,13,1,14,1,
        14,1,14,5,14,214,8,14,10,14,12,14,217,9,14,1,15,1,15,3,15,221,8,
        15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,5,18,234,
        8,18,10,18,12,18,237,9,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,22,1,22,1,22,3,22,251,8,22,1,23,1,23,1,23,1,23,1,23,3,23,
        258,8,23,1,23,1,23,5,23,262,8,23,10,23,12,23,265,9,23,1,24,1,24,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,280,
        8,25,1,26,1,26,1,26,1,26,3,26,286,8,26,1,27,1,27,1,28,1,28,1,28,
        5,28,293,8,28,10,28,12,28,296,9,28,1,29,1,29,1,29,5,29,301,8,29,
        10,29,12,29,304,9,29,1,30,1,30,1,30,5,30,309,8,30,10,30,12,30,312,
        9,30,1,31,1,31,1,31,5,31,317,8,31,10,31,12,31,320,9,31,1,32,1,32,
        1,32,5,32,325,8,32,10,32,12,32,328,9,32,1,33,1,33,1,33,5,33,333,
        8,33,10,33,12,33,336,9,33,1,34,1,34,3,34,340,8,34,1,34,0,1,46,35,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,0,7,1,0,14,17,1,0,18,19,1,0,
        20,23,2,0,5,5,25,28,1,0,31,32,1,0,33,34,2,0,35,36,44,44,361,0,71,
        1,0,0,0,2,77,1,0,0,0,4,86,1,0,0,0,6,106,1,0,0,0,8,108,1,0,0,0,10,
        123,1,0,0,0,12,145,1,0,0,0,14,167,1,0,0,0,16,169,1,0,0,0,18,175,
        1,0,0,0,20,181,1,0,0,0,22,189,1,0,0,0,24,197,1,0,0,0,26,203,1,0,
        0,0,28,210,1,0,0,0,30,218,1,0,0,0,32,224,1,0,0,0,34,227,1,0,0,0,
        36,230,1,0,0,0,38,238,1,0,0,0,40,241,1,0,0,0,42,243,1,0,0,0,44,250,
        1,0,0,0,46,257,1,0,0,0,48,266,1,0,0,0,50,279,1,0,0,0,52,285,1,0,
        0,0,54,287,1,0,0,0,56,289,1,0,0,0,58,297,1,0,0,0,60,305,1,0,0,0,
        62,313,1,0,0,0,64,321,1,0,0,0,66,329,1,0,0,0,68,339,1,0,0,0,70,72,
        3,6,3,0,71,70,1,0,0,0,72,73,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,
        74,75,1,0,0,0,75,76,5,0,0,1,76,1,1,0,0,0,77,78,3,40,20,0,78,79,3,
        50,25,0,79,81,5,1,0,0,80,82,3,36,18,0,81,80,1,0,0,0,81,82,1,0,0,
        0,82,83,1,0,0,0,83,84,5,2,0,0,84,85,3,4,2,0,85,3,1,0,0,0,86,90,5,
        3,0,0,87,89,3,6,3,0,88,87,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,90,
        91,1,0,0,0,91,93,1,0,0,0,92,90,1,0,0,0,93,94,5,4,0,0,94,5,1,0,0,
        0,95,107,3,8,4,0,96,107,3,10,5,0,97,107,3,12,6,0,98,107,3,16,8,0,
        99,107,3,18,9,0,100,107,3,20,10,0,101,107,3,22,11,0,102,107,3,30,
        15,0,103,107,3,32,16,0,104,107,3,2,1,0,105,107,3,34,17,0,106,95,
        1,0,0,0,106,96,1,0,0,0,106,97,1,0,0,0,106,98,1,0,0,0,106,99,1,0,
        0,0,106,100,1,0,0,0,106,101,1,0,0,0,106,102,1,0,0,0,106,103,1,0,
        0,0,106,104,1,0,0,0,106,105,1,0,0,0,107,7,1,0,0,0,108,112,3,40,20,
        0,109,111,5,44,0,0,110,109,1,0,0,0,111,114,1,0,0,0,112,110,1,0,0,
        0,112,113,1,0,0,0,113,115,1,0,0,0,114,112,1,0,0,0,115,118,3,50,25,
        0,116,117,5,5,0,0,117,119,3,42,21,0,118,116,1,0,0,0,118,119,1,0,
        0,0,119,121,1,0,0,0,120,122,5,6,0,0,121,120,1,0,0,0,121,122,1,0,
        0,0,122,9,1,0,0,0,123,124,5,7,0,0,124,132,5,1,0,0,125,127,3,8,4,
        0,126,125,1,0,0,0,126,127,1,0,0,0,127,133,1,0,0,0,128,133,1,0,0,
        0,129,131,3,44,22,0,130,129,1,0,0,0,130,131,1,0,0,0,131,133,1,0,
        0,0,132,126,1,0,0,0,132,128,1,0,0,0,132,130,1,0,0,0,133,134,1,0,
        0,0,134,136,5,6,0,0,135,137,3,56,28,0,136,135,1,0,0,0,136,137,1,
        0,0,0,137,138,1,0,0,0,138,140,5,6,0,0,139,141,3,46,23,0,140,139,
        1,0,0,0,140,141,1,0,0,0,141,142,1,0,0,0,142,143,5,2,0,0,143,144,
        3,4,2,0,144,11,1,0,0,0,145,146,5,7,0,0,146,154,5,1,0,0,147,149,3,
        8,4,0,148,147,1,0,0,0,148,149,1,0,0,0,149,155,1,0,0,0,150,155,1,
        0,0,0,151,153,3,44,22,0,152,151,1,0,0,0,152,153,1,0,0,0,153,155,
        1,0,0,0,154,148,1,0,0,0,154,150,1,0,0,0,154,152,1,0,0,0,155,156,
        1,0,0,0,156,158,5,6,0,0,157,159,3,56,28,0,158,157,1,0,0,0,158,159,
        1,0,0,0,159,160,1,0,0,0,160,162,5,6,0,0,161,163,3,46,23,0,162,161,
        1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,5,2,0,0,165,166,
        3,6,3,0,166,13,1,0,0,0,167,168,3,56,28,0,168,15,1,0,0,0,169,170,
        5,8,0,0,170,171,5,1,0,0,171,172,3,14,7,0,172,173,5,2,0,0,173,174,
        3,4,2,0,174,17,1,0,0,0,175,176,5,8,0,0,176,177,5,1,0,0,177,178,3,
        14,7,0,178,179,5,2,0,0,179,180,3,6,3,0,180,19,1,0,0,0,181,182,5,
        9,0,0,182,183,5,1,0,0,183,184,3,14,7,0,184,185,5,2,0,0,185,187,3,
        4,2,0,186,188,3,24,12,0,187,186,1,0,0,0,187,188,1,0,0,0,188,21,1,
        0,0,0,189,190,5,9,0,0,190,191,5,1,0,0,191,192,3,14,7,0,192,193,5,
        2,0,0,193,195,3,6,3,0,194,196,3,24,12,0,195,194,1,0,0,0,195,196,
        1,0,0,0,196,23,1,0,0,0,197,201,5,10,0,0,198,202,3,4,2,0,199,202,
        3,20,10,0,200,202,3,6,3,0,201,198,1,0,0,0,201,199,1,0,0,0,201,200,
        1,0,0,0,202,25,1,0,0,0,203,204,5,39,0,0,204,206,5,1,0,0,205,207,
        3,28,14,0,206,205,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,
        5,2,0,0,209,27,1,0,0,0,210,215,3,42,21,0,211,212,5,11,0,0,212,214,
        3,42,21,0,213,211,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,
        1,0,0,0,216,29,1,0,0,0,217,215,1,0,0,0,218,220,5,12,0,0,219,221,
        3,42,21,0,220,219,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,223,
        5,6,0,0,223,31,1,0,0,0,224,225,3,42,21,0,225,226,5,6,0,0,226,33,
        1,0,0,0,227,228,5,13,0,0,228,229,5,45,0,0,229,35,1,0,0,0,230,235,
        3,38,19,0,231,232,5,11,0,0,232,234,3,38,19,0,233,231,1,0,0,0,234,
        237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,37,1,0,0,0,237,235,
        1,0,0,0,238,239,3,40,20,0,239,240,3,50,25,0,240,39,1,0,0,0,241,242,
        7,0,0,0,242,41,1,0,0,0,243,244,3,44,22,0,244,43,1,0,0,0,245,246,
        3,46,23,0,246,247,3,54,27,0,247,248,3,44,22,0,248,251,1,0,0,0,249,
        251,3,56,28,0,250,245,1,0,0,0,250,249,1,0,0,0,251,45,1,0,0,0,252,
        253,6,23,-1,0,253,254,7,1,0,0,254,258,3,46,23,4,255,258,3,52,26,
        0,256,258,3,50,25,0,257,252,1,0,0,0,257,255,1,0,0,0,257,256,1,0,
        0,0,258,263,1,0,0,0,259,260,10,3,0,0,260,262,7,1,0,0,261,259,1,0,
        0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,47,1,0,0,
        0,265,263,1,0,0,0,266,267,7,2,0,0,267,49,1,0,0,0,268,280,5,39,0,
        0,269,280,5,40,0,0,270,280,5,42,0,0,271,280,5,43,0,0,272,280,5,45,
        0,0,273,280,5,41,0,0,274,280,3,26,13,0,275,276,5,1,0,0,276,277,3,
        42,21,0,277,278,5,2,0,0,278,280,1,0,0,0,279,268,1,0,0,0,279,269,
        1,0,0,0,279,270,1,0,0,0,279,271,1,0,0,0,279,272,1,0,0,0,279,273,
        1,0,0,0,279,274,1,0,0,0,279,275,1,0,0,0,280,51,1,0,0,0,281,282,5,
        24,0,0,282,286,3,50,25,0,283,284,5,44,0,0,284,286,3,50,25,0,285,
        281,1,0,0,0,285,283,1,0,0,0,286,53,1,0,0,0,287,288,7,3,0,0,288,55,
        1,0,0,0,289,294,3,58,29,0,290,291,5,29,0,0,291,293,3,58,29,0,292,
        290,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,
        57,1,0,0,0,296,294,1,0,0,0,297,302,3,60,30,0,298,299,5,30,0,0,299,
        301,3,60,30,0,300,298,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,
        303,1,0,0,0,303,59,1,0,0,0,304,302,1,0,0,0,305,310,3,62,31,0,306,
        307,7,4,0,0,307,309,3,62,31,0,308,306,1,0,0,0,309,312,1,0,0,0,310,
        308,1,0,0,0,310,311,1,0,0,0,311,61,1,0,0,0,312,310,1,0,0,0,313,318,
        3,64,32,0,314,315,7,2,0,0,315,317,3,64,32,0,316,314,1,0,0,0,317,
        320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,63,1,0,0,0,320,318,
        1,0,0,0,321,326,3,66,33,0,322,323,7,5,0,0,323,325,3,66,33,0,324,
        322,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,
        65,1,0,0,0,328,326,1,0,0,0,329,334,3,46,23,0,330,331,7,6,0,0,331,
        333,3,46,23,0,332,330,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,
        335,1,0,0,0,335,67,1,0,0,0,336,334,1,0,0,0,337,340,3,64,32,0,338,
        340,3,66,33,0,339,337,1,0,0,0,339,338,1,0,0,0,340,69,1,0,0,0,36,
        73,81,90,106,112,118,121,126,130,132,136,140,148,152,154,158,162,
        187,195,201,206,215,220,235,250,257,263,279,285,294,302,310,318,
        326,334,339
=======
<<<<<<< HEAD
        4,1,46,334,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
=======
<<<<<<< HEAD
        4,1,46,336,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
=======
        4,1,54,426,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
>>>>>>> maria-new
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
<<<<<<< HEAD
        7,33,1,0,4,0,70,8,0,11,0,12,0,71,1,0,1,0,1,1,1,1,1,1,1,1,3,1,80,
        8,1,1,1,1,1,1,1,1,2,1,2,5,2,87,8,2,10,2,12,2,90,9,2,1,2,1,2,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,105,8,3,1,4,1,4,5,4,
        109,8,4,10,4,12,4,112,9,4,1,4,1,4,1,4,3,4,117,8,4,1,4,3,4,120,8,
        4,1,5,1,5,1,5,3,5,125,8,5,1,5,1,5,3,5,129,8,5,3,5,131,8,5,1,5,1,
        5,3,5,135,8,5,1,5,1,5,3,5,139,8,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,147,
        8,6,1,6,1,6,3,6,151,8,6,3,6,153,8,6,1,6,1,6,3,6,157,8,6,1,6,1,6,
        3,6,161,8,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,187,8,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,196,8,11,1,12,1,12,1,12,
        3,12,201,8,12,1,12,1,12,1,13,1,13,1,13,5,13,208,8,13,10,13,12,13,
        211,9,13,1,14,1,14,3,14,215,8,14,1,14,1,14,1,15,1,15,1,15,1,16,1,
        16,1,16,1,17,1,17,1,17,5,17,228,8,17,10,17,12,17,231,9,17,1,18,1,
        18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,3,21,245,8,
        21,1,22,1,22,1,22,1,22,1,22,3,22,252,8,22,1,22,1,22,5,22,256,8,22,
        10,22,12,22,259,9,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,3,24,274,8,24,1,25,1,25,1,25,1,25,3,25,280,8,
        25,1,26,1,26,1,27,1,27,1,27,5,27,287,8,27,10,27,12,27,290,9,27,1,
        28,1,28,1,28,5,28,295,8,28,10,28,12,28,298,9,28,1,29,1,29,1,29,5,
        29,303,8,29,10,29,12,29,306,9,29,1,30,1,30,1,30,5,30,311,8,30,10,
        30,12,30,314,9,30,1,31,1,31,1,31,5,31,319,8,31,10,31,12,31,322,9,
        31,1,32,1,32,1,32,5,32,327,8,32,10,32,12,32,330,9,32,1,33,1,33,3,
        33,334,8,33,1,33,0,1,44,34,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,0,7,
        1,0,14,17,1,0,18,19,1,0,20,23,2,0,5,5,25,28,1,0,31,32,1,0,33,34,
        2,0,35,36,44,44,354,0,69,1,0,0,0,2,75,1,0,0,0,4,84,1,0,0,0,6,104,
        1,0,0,0,8,106,1,0,0,0,10,121,1,0,0,0,12,143,1,0,0,0,14,165,1,0,0,
        0,16,167,1,0,0,0,18,173,1,0,0,0,20,179,1,0,0,0,22,188,1,0,0,0,24,
        197,1,0,0,0,26,204,1,0,0,0,28,212,1,0,0,0,30,218,1,0,0,0,32,221,
        1,0,0,0,34,224,1,0,0,0,36,232,1,0,0,0,38,235,1,0,0,0,40,237,1,0,
        0,0,42,244,1,0,0,0,44,251,1,0,0,0,46,260,1,0,0,0,48,273,1,0,0,0,
        50,279,1,0,0,0,52,281,1,0,0,0,54,283,1,0,0,0,56,291,1,0,0,0,58,299,
        1,0,0,0,60,307,1,0,0,0,62,315,1,0,0,0,64,323,1,0,0,0,66,333,1,0,
        0,0,68,70,3,6,3,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,
        1,0,0,0,72,73,1,0,0,0,73,74,5,0,0,1,74,1,1,0,0,0,75,76,3,38,19,0,
        76,77,3,48,24,0,77,79,5,1,0,0,78,80,3,34,17,0,79,78,1,0,0,0,79,80,
        1,0,0,0,80,81,1,0,0,0,81,82,5,2,0,0,82,83,3,4,2,0,83,3,1,0,0,0,84,
        88,5,3,0,0,85,87,3,6,3,0,86,85,1,0,0,0,87,90,1,0,0,0,88,86,1,0,0,
        0,88,89,1,0,0,0,89,91,1,0,0,0,90,88,1,0,0,0,91,92,5,4,0,0,92,5,1,
        0,0,0,93,105,3,8,4,0,94,105,3,10,5,0,95,105,3,12,6,0,96,105,3,16,
        8,0,97,105,3,18,9,0,98,105,3,20,10,0,99,105,3,22,11,0,100,105,3,
        28,14,0,101,105,3,30,15,0,102,105,3,2,1,0,103,105,3,32,16,0,104,
        93,1,0,0,0,104,94,1,0,0,0,104,95,1,0,0,0,104,96,1,0,0,0,104,97,1,
        0,0,0,104,98,1,0,0,0,104,99,1,0,0,0,104,100,1,0,0,0,104,101,1,0,
        0,0,104,102,1,0,0,0,104,103,1,0,0,0,105,7,1,0,0,0,106,110,3,38,19,
        0,107,109,5,44,0,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,
        0,110,111,1,0,0,0,111,113,1,0,0,0,112,110,1,0,0,0,113,116,3,48,24,
        0,114,115,5,5,0,0,115,117,3,40,20,0,116,114,1,0,0,0,116,117,1,0,
        0,0,117,119,1,0,0,0,118,120,5,6,0,0,119,118,1,0,0,0,119,120,1,0,
        0,0,120,9,1,0,0,0,121,122,5,7,0,0,122,130,5,1,0,0,123,125,3,8,4,
        0,124,123,1,0,0,0,124,125,1,0,0,0,125,131,1,0,0,0,126,131,1,0,0,
        0,127,129,3,42,21,0,128,127,1,0,0,0,128,129,1,0,0,0,129,131,1,0,
        0,0,130,124,1,0,0,0,130,126,1,0,0,0,130,128,1,0,0,0,131,132,1,0,
        0,0,132,134,5,6,0,0,133,135,3,54,27,0,134,133,1,0,0,0,134,135,1,
        0,0,0,135,136,1,0,0,0,136,138,5,6,0,0,137,139,3,44,22,0,138,137,
        1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,141,5,2,0,0,141,142,
        3,4,2,0,142,11,1,0,0,0,143,144,5,7,0,0,144,152,5,1,0,0,145,147,3,
        8,4,0,146,145,1,0,0,0,146,147,1,0,0,0,147,153,1,0,0,0,148,153,1,
        0,0,0,149,151,3,42,21,0,150,149,1,0,0,0,150,151,1,0,0,0,151,153,
        1,0,0,0,152,146,1,0,0,0,152,148,1,0,0,0,152,150,1,0,0,0,153,154,
        1,0,0,0,154,156,5,6,0,0,155,157,3,54,27,0,156,155,1,0,0,0,156,157,
        1,0,0,0,157,158,1,0,0,0,158,160,5,6,0,0,159,161,3,44,22,0,160,159,
        1,0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,163,5,2,0,0,163,164,
        3,6,3,0,164,13,1,0,0,0,165,166,3,54,27,0,166,15,1,0,0,0,167,168,
        5,8,0,0,168,169,5,1,0,0,169,170,3,14,7,0,170,171,5,2,0,0,171,172,
        3,4,2,0,172,17,1,0,0,0,173,174,5,8,0,0,174,175,5,1,0,0,175,176,3,
        14,7,0,176,177,5,2,0,0,177,178,3,6,3,0,178,19,1,0,0,0,179,180,5,
        9,0,0,180,181,5,1,0,0,181,182,3,14,7,0,182,183,5,2,0,0,183,186,3,
        4,2,0,184,185,5,10,0,0,185,187,3,4,2,0,186,184,1,0,0,0,186,187,1,
        0,0,0,187,21,1,0,0,0,188,189,5,9,0,0,189,190,5,1,0,0,190,191,3,14,
        7,0,191,192,5,2,0,0,192,195,3,6,3,0,193,194,5,10,0,0,194,196,3,6,
        3,0,195,193,1,0,0,0,195,196,1,0,0,0,196,23,1,0,0,0,197,198,5,39,
        0,0,198,200,5,1,0,0,199,201,3,26,13,0,200,199,1,0,0,0,200,201,1,
        0,0,0,201,202,1,0,0,0,202,203,5,2,0,0,203,25,1,0,0,0,204,209,3,40,
        20,0,205,206,5,11,0,0,206,208,3,40,20,0,207,205,1,0,0,0,208,211,
        1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,27,1,0,0,0,211,209,1,
        0,0,0,212,214,5,12,0,0,213,215,3,40,20,0,214,213,1,0,0,0,214,215,
        1,0,0,0,215,216,1,0,0,0,216,217,5,6,0,0,217,29,1,0,0,0,218,219,3,
        40,20,0,219,220,5,6,0,0,220,31,1,0,0,0,221,222,5,13,0,0,222,223,
        5,45,0,0,223,33,1,0,0,0,224,229,3,36,18,0,225,226,5,11,0,0,226,228,
        3,36,18,0,227,225,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,
        1,0,0,0,230,35,1,0,0,0,231,229,1,0,0,0,232,233,3,38,19,0,233,234,
        3,48,24,0,234,37,1,0,0,0,235,236,7,0,0,0,236,39,1,0,0,0,237,238,
        3,42,21,0,238,41,1,0,0,0,239,240,3,44,22,0,240,241,3,52,26,0,241,
        242,3,42,21,0,242,245,1,0,0,0,243,245,3,54,27,0,244,239,1,0,0,0,
        244,243,1,0,0,0,245,43,1,0,0,0,246,247,6,22,-1,0,247,248,7,1,0,0,
        248,252,3,44,22,4,249,252,3,50,25,0,250,252,3,48,24,0,251,246,1,
        0,0,0,251,249,1,0,0,0,251,250,1,0,0,0,252,257,1,0,0,0,253,254,10,
        3,0,0,254,256,7,1,0,0,255,253,1,0,0,0,256,259,1,0,0,0,257,255,1,
        0,0,0,257,258,1,0,0,0,258,45,1,0,0,0,259,257,1,0,0,0,260,261,7,2,
        0,0,261,47,1,0,0,0,262,274,5,39,0,0,263,274,5,40,0,0,264,274,5,42,
        0,0,265,274,5,43,0,0,266,274,5,45,0,0,267,274,5,41,0,0,268,274,3,
        24,12,0,269,270,5,1,0,0,270,271,3,40,20,0,271,272,5,2,0,0,272,274,
        1,0,0,0,273,262,1,0,0,0,273,263,1,0,0,0,273,264,1,0,0,0,273,265,
        1,0,0,0,273,266,1,0,0,0,273,267,1,0,0,0,273,268,1,0,0,0,273,269,
        1,0,0,0,274,49,1,0,0,0,275,276,5,24,0,0,276,280,3,48,24,0,277,278,
        5,44,0,0,278,280,3,48,24,0,279,275,1,0,0,0,279,277,1,0,0,0,280,51,
        1,0,0,0,281,282,7,3,0,0,282,53,1,0,0,0,283,288,3,56,28,0,284,285,
        5,29,0,0,285,287,3,56,28,0,286,284,1,0,0,0,287,290,1,0,0,0,288,286,
        1,0,0,0,288,289,1,0,0,0,289,55,1,0,0,0,290,288,1,0,0,0,291,296,3,
        58,29,0,292,293,5,30,0,0,293,295,3,58,29,0,294,292,1,0,0,0,295,298,
        1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,57,1,0,0,0,298,296,1,
        0,0,0,299,304,3,60,30,0,300,301,7,4,0,0,301,303,3,60,30,0,302,300,
        1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,59,1,
        0,0,0,306,304,1,0,0,0,307,312,3,62,31,0,308,309,7,2,0,0,309,311,
        3,62,31,0,310,308,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,
        1,0,0,0,313,61,1,0,0,0,314,312,1,0,0,0,315,320,3,64,32,0,316,317,
        7,5,0,0,317,319,3,64,32,0,318,316,1,0,0,0,319,322,1,0,0,0,320,318,
        1,0,0,0,320,321,1,0,0,0,321,63,1,0,0,0,322,320,1,0,0,0,323,328,3,
        44,22,0,324,325,7,6,0,0,325,327,3,44,22,0,326,324,1,0,0,0,327,330,
        1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,65,1,0,0,0,330,328,1,
        0,0,0,331,334,3,62,31,0,332,334,3,64,32,0,333,331,1,0,0,0,333,332,
        1,0,0,0,334,67,1,0,0,0,35,71,79,88,104,110,116,119,124,128,130,134,
        138,146,150,152,156,160,186,195,200,209,214,229,244,251,257,273,
        279,288,296,304,312,320,328,333
=======
<<<<<<< HEAD
        4,1,45,327,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,1,0,4,0,70,8,0,11,0,12,0,71,1,0,1,0,1,1,1,1,1,1,1,1,3,1,80,
        8,1,1,1,1,1,1,1,1,2,1,2,5,2,87,8,2,10,2,12,2,90,9,2,1,2,1,2,1,3,
<<<<<<< HEAD
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,105,8,3,1,4,1,4,5,4,
        109,8,4,10,4,12,4,112,9,4,1,4,1,4,1,4,3,4,117,8,4,1,4,3,4,120,8,
        4,1,5,1,5,1,5,3,5,125,8,5,1,5,1,5,3,5,129,8,5,3,5,131,8,5,1,5,1,
        5,3,5,135,8,5,1,5,1,5,3,5,139,8,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,147,
        8,6,1,6,1,6,3,6,151,8,6,3,6,153,8,6,1,6,1,6,3,6,157,8,6,1,6,1,6,
        3,6,161,8,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,186,8,10,1,11,
        1,11,1,11,1,11,1,11,1,11,3,11,194,8,11,1,12,1,12,1,12,1,12,3,12,
        200,8,12,1,13,1,13,1,13,3,13,205,8,13,1,13,1,13,1,14,1,14,1,14,5,
        14,212,8,14,10,14,12,14,215,9,14,1,15,1,15,3,15,219,8,15,1,15,1,
        15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,5,18,232,8,18,10,
        18,12,18,235,9,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
        22,1,22,1,22,3,22,249,8,22,1,23,1,23,1,23,1,23,3,23,255,8,23,1,23,
        1,23,5,23,259,8,23,10,23,12,23,262,9,23,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,278,8,25,1,26,
        1,26,1,27,1,27,1,27,5,27,285,8,27,10,27,12,27,288,9,27,1,28,1,28,
        1,28,5,28,293,8,28,10,28,12,28,296,9,28,1,29,1,29,1,29,5,29,301,
        8,29,10,29,12,29,304,9,29,1,30,1,30,1,30,5,30,309,8,30,10,30,12,
        30,312,9,30,1,31,1,31,1,31,5,31,317,8,31,10,31,12,31,320,9,31,1,
        32,1,32,1,32,5,32,325,8,32,10,32,12,32,328,9,32,1,33,1,33,3,33,332,
        8,33,1,33,0,1,46,34,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,0,7,1,0,14,17,
        1,0,18,19,1,0,20,23,2,0,5,5,24,27,1,0,30,31,1,0,32,33,2,0,34,35,
        43,43,353,0,69,1,0,0,0,2,75,1,0,0,0,4,84,1,0,0,0,6,104,1,0,0,0,8,
        106,1,0,0,0,10,121,1,0,0,0,12,143,1,0,0,0,14,165,1,0,0,0,16,167,
        1,0,0,0,18,173,1,0,0,0,20,179,1,0,0,0,22,187,1,0,0,0,24,195,1,0,
        0,0,26,201,1,0,0,0,28,208,1,0,0,0,30,216,1,0,0,0,32,222,1,0,0,0,
        34,225,1,0,0,0,36,228,1,0,0,0,38,236,1,0,0,0,40,239,1,0,0,0,42,241,
        1,0,0,0,44,248,1,0,0,0,46,254,1,0,0,0,48,263,1,0,0,0,50,277,1,0,
        0,0,52,279,1,0,0,0,54,281,1,0,0,0,56,289,1,0,0,0,58,297,1,0,0,0,
        60,305,1,0,0,0,62,313,1,0,0,0,64,321,1,0,0,0,66,331,1,0,0,0,68,70,
        3,6,3,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,
        72,73,1,0,0,0,73,74,5,0,0,1,74,1,1,0,0,0,75,76,3,40,20,0,76,77,3,
        50,25,0,77,79,5,1,0,0,78,80,3,36,18,0,79,78,1,0,0,0,79,80,1,0,0,
        0,80,81,1,0,0,0,81,82,5,2,0,0,82,83,3,4,2,0,83,3,1,0,0,0,84,88,5,
        3,0,0,85,87,3,6,3,0,86,85,1,0,0,0,87,90,1,0,0,0,88,86,1,0,0,0,88,
        89,1,0,0,0,89,91,1,0,0,0,90,88,1,0,0,0,91,92,5,4,0,0,92,5,1,0,0,
        0,93,105,3,8,4,0,94,105,3,10,5,0,95,105,3,12,6,0,96,105,3,16,8,0,
        97,105,3,18,9,0,98,105,3,20,10,0,99,105,3,22,11,0,100,105,3,30,15,
        0,101,105,3,32,16,0,102,105,3,2,1,0,103,105,3,34,17,0,104,93,1,0,
        0,0,104,94,1,0,0,0,104,95,1,0,0,0,104,96,1,0,0,0,104,97,1,0,0,0,
        104,98,1,0,0,0,104,99,1,0,0,0,104,100,1,0,0,0,104,101,1,0,0,0,104,
        102,1,0,0,0,104,103,1,0,0,0,105,7,1,0,0,0,106,110,3,40,20,0,107,
        109,5,43,0,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,
        111,1,0,0,0,111,113,1,0,0,0,112,110,1,0,0,0,113,116,3,50,25,0,114,
        115,5,5,0,0,115,117,3,42,21,0,116,114,1,0,0,0,116,117,1,0,0,0,117,
        119,1,0,0,0,118,120,5,6,0,0,119,118,1,0,0,0,119,120,1,0,0,0,120,
        9,1,0,0,0,121,122,5,7,0,0,122,130,5,1,0,0,123,125,3,8,4,0,124,123,
        1,0,0,0,124,125,1,0,0,0,125,131,1,0,0,0,126,131,1,0,0,0,127,129,
        3,44,22,0,128,127,1,0,0,0,128,129,1,0,0,0,129,131,1,0,0,0,130,124,
        1,0,0,0,130,126,1,0,0,0,130,128,1,0,0,0,131,132,1,0,0,0,132,134,
        5,6,0,0,133,135,3,54,27,0,134,133,1,0,0,0,134,135,1,0,0,0,135,136,
        1,0,0,0,136,138,5,6,0,0,137,139,3,46,23,0,138,137,1,0,0,0,138,139,
        1,0,0,0,139,140,1,0,0,0,140,141,5,2,0,0,141,142,3,4,2,0,142,11,1,
        0,0,0,143,144,5,7,0,0,144,152,5,1,0,0,145,147,3,8,4,0,146,145,1,
        0,0,0,146,147,1,0,0,0,147,153,1,0,0,0,148,153,1,0,0,0,149,151,3,
        44,22,0,150,149,1,0,0,0,150,151,1,0,0,0,151,153,1,0,0,0,152,146,
        1,0,0,0,152,148,1,0,0,0,152,150,1,0,0,0,153,154,1,0,0,0,154,156,
        5,6,0,0,155,157,3,54,27,0,156,155,1,0,0,0,156,157,1,0,0,0,157,158,
        1,0,0,0,158,160,5,6,0,0,159,161,3,46,23,0,160,159,1,0,0,0,160,161,
        1,0,0,0,161,162,1,0,0,0,162,163,5,2,0,0,163,164,3,6,3,0,164,13,1,
        0,0,0,165,166,3,54,27,0,166,15,1,0,0,0,167,168,5,8,0,0,168,169,5,
        1,0,0,169,170,3,14,7,0,170,171,5,2,0,0,171,172,3,4,2,0,172,17,1,
        0,0,0,173,174,5,8,0,0,174,175,5,1,0,0,175,176,3,14,7,0,176,177,5,
        2,0,0,177,178,3,6,3,0,178,19,1,0,0,0,179,180,5,9,0,0,180,181,5,1,
        0,0,181,182,3,14,7,0,182,183,5,2,0,0,183,185,3,4,2,0,184,186,3,24,
        12,0,185,184,1,0,0,0,185,186,1,0,0,0,186,21,1,0,0,0,187,188,5,9,
        0,0,188,189,5,1,0,0,189,190,3,14,7,0,190,191,5,2,0,0,191,193,3,6,
        3,0,192,194,3,24,12,0,193,192,1,0,0,0,193,194,1,0,0,0,194,23,1,0,
        0,0,195,199,5,10,0,0,196,200,3,4,2,0,197,200,3,20,10,0,198,200,3,
        6,3,0,199,196,1,0,0,0,199,197,1,0,0,0,199,198,1,0,0,0,200,25,1,0,
        0,0,201,202,5,38,0,0,202,204,5,1,0,0,203,205,3,28,14,0,204,203,1,
        0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,207,5,2,0,0,207,27,1,0,
        0,0,208,213,3,42,21,0,209,210,5,11,0,0,210,212,3,42,21,0,211,209,
        1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,29,1,
        0,0,0,215,213,1,0,0,0,216,218,5,12,0,0,217,219,3,42,21,0,218,217,
        1,0,0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,221,5,6,0,0,221,31,1,
        0,0,0,222,223,3,42,21,0,223,224,5,6,0,0,224,33,1,0,0,0,225,226,5,
        13,0,0,226,227,5,45,0,0,227,35,1,0,0,0,228,233,3,38,19,0,229,230,
        5,11,0,0,230,232,3,38,19,0,231,229,1,0,0,0,232,235,1,0,0,0,233,231,
        1,0,0,0,233,234,1,0,0,0,234,37,1,0,0,0,235,233,1,0,0,0,236,237,3,
        40,20,0,237,238,3,50,25,0,238,39,1,0,0,0,239,240,7,0,0,0,240,41,
        1,0,0,0,241,242,3,44,22,0,242,43,1,0,0,0,243,244,3,46,23,0,244,245,
        3,52,26,0,245,246,3,44,22,0,246,249,1,0,0,0,247,249,3,54,27,0,248,
        243,1,0,0,0,248,247,1,0,0,0,249,45,1,0,0,0,250,251,6,23,-1,0,251,
        252,7,1,0,0,252,255,3,46,23,3,253,255,3,50,25,0,254,250,1,0,0,0,
        254,253,1,0,0,0,255,260,1,0,0,0,256,257,10,2,0,0,257,259,7,1,0,0,
        258,256,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,
        261,47,1,0,0,0,262,260,1,0,0,0,263,264,7,2,0,0,264,49,1,0,0,0,265,
        278,5,38,0,0,266,278,5,44,0,0,267,278,5,39,0,0,268,278,5,41,0,0,
        269,278,5,42,0,0,270,278,5,45,0,0,271,278,5,40,0,0,272,278,3,26,
        13,0,273,274,5,1,0,0,274,275,3,42,21,0,275,276,5,2,0,0,276,278,1,
        0,0,0,277,265,1,0,0,0,277,266,1,0,0,0,277,267,1,0,0,0,277,268,1,
        0,0,0,277,269,1,0,0,0,277,270,1,0,0,0,277,271,1,0,0,0,277,272,1,
        0,0,0,277,273,1,0,0,0,278,51,1,0,0,0,279,280,7,3,0,0,280,53,1,0,
        0,0,281,286,3,56,28,0,282,283,5,28,0,0,283,285,3,56,28,0,284,282,
        1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,55,1,
        0,0,0,288,286,1,0,0,0,289,294,3,58,29,0,290,291,5,29,0,0,291,293,
        3,58,29,0,292,290,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,294,295,
        1,0,0,0,295,57,1,0,0,0,296,294,1,0,0,0,297,302,3,60,30,0,298,299,
        7,4,0,0,299,301,3,60,30,0,300,298,1,0,0,0,301,304,1,0,0,0,302,300,
        1,0,0,0,302,303,1,0,0,0,303,59,1,0,0,0,304,302,1,0,0,0,305,310,3,
        62,31,0,306,307,7,2,0,0,307,309,3,62,31,0,308,306,1,0,0,0,309,312,
        1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,61,1,0,0,0,312,310,1,
        0,0,0,313,318,3,64,32,0,314,315,7,5,0,0,315,317,3,64,32,0,316,314,
        1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,319,63,1,
        0,0,0,320,318,1,0,0,0,321,326,3,46,23,0,322,323,7,6,0,0,323,325,
        3,46,23,0,324,322,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,
        1,0,0,0,327,65,1,0,0,0,328,326,1,0,0,0,329,332,3,62,31,0,330,332,
        3,64,32,0,331,329,1,0,0,0,331,330,1,0,0,0,332,67,1,0,0,0,35,71,79,
        88,104,110,116,119,124,128,130,134,138,146,150,152,156,160,185,193,
        199,204,213,218,233,248,254,260,277,286,294,302,310,318,326,331
=======
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,105,8,3,1,4,1,4,1,4,
        1,4,3,4,111,8,4,1,4,3,4,114,8,4,1,5,1,5,1,5,3,5,119,8,5,1,5,1,5,
        3,5,123,8,5,3,5,125,8,5,1,5,1,5,3,5,129,8,5,1,5,1,5,3,5,133,8,5,
        1,5,1,5,1,5,1,6,1,6,1,6,3,6,141,8,6,1,6,1,6,3,6,145,8,6,3,6,147,
        8,6,1,6,1,6,3,6,151,8,6,1,6,1,6,3,6,155,8,6,1,6,1,6,1,6,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,10,1,10,3,10,180,8,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,188,
        8,11,1,12,1,12,1,12,1,12,3,12,194,8,12,1,13,1,13,1,13,3,13,199,8,
        13,1,13,1,13,1,14,1,14,1,14,5,14,206,8,14,10,14,12,14,209,9,14,1,
        15,1,15,3,15,213,8,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,
        18,1,18,1,18,5,18,226,8,18,10,18,12,18,229,9,18,1,19,1,19,1,19,1,
        20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,243,8,22,1,23,1,
        23,1,23,1,23,3,23,249,8,23,1,23,1,23,5,23,253,8,23,10,23,12,23,256,
        9,23,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,3,25,271,8,25,1,26,1,26,1,27,1,27,1,27,5,27,278,8,27,10,27,
        12,27,281,9,27,1,28,1,28,1,28,5,28,286,8,28,10,28,12,28,289,9,28,
        1,29,1,29,1,29,5,29,294,8,29,10,29,12,29,297,9,29,1,30,1,30,1,30,
        5,30,302,8,30,10,30,12,30,305,9,30,1,31,1,31,1,31,5,31,310,8,31,
        10,31,12,31,313,9,31,1,32,1,32,1,32,5,32,318,8,32,10,32,12,32,321,
        9,32,1,33,1,33,3,33,325,8,33,1,33,0,1,46,34,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,0,7,1,0,14,17,1,0,18,19,1,0,20,23,2,0,5,5,24,27,1,0,30,
        31,1,0,32,33,1,0,34,36,344,0,69,1,0,0,0,2,75,1,0,0,0,4,84,1,0,0,
        0,6,104,1,0,0,0,8,106,1,0,0,0,10,115,1,0,0,0,12,137,1,0,0,0,14,159,
        1,0,0,0,16,161,1,0,0,0,18,167,1,0,0,0,20,173,1,0,0,0,22,181,1,0,
        0,0,24,189,1,0,0,0,26,195,1,0,0,0,28,202,1,0,0,0,30,210,1,0,0,0,
        32,216,1,0,0,0,34,219,1,0,0,0,36,222,1,0,0,0,38,230,1,0,0,0,40,233,
        1,0,0,0,42,235,1,0,0,0,44,242,1,0,0,0,46,248,1,0,0,0,48,257,1,0,
        0,0,50,270,1,0,0,0,52,272,1,0,0,0,54,274,1,0,0,0,56,282,1,0,0,0,
        58,290,1,0,0,0,60,298,1,0,0,0,62,306,1,0,0,0,64,314,1,0,0,0,66,324,
        1,0,0,0,68,70,3,6,3,0,69,68,1,0,0,0,70,71,1,0,0,0,71,69,1,0,0,0,
        71,72,1,0,0,0,72,73,1,0,0,0,73,74,5,0,0,1,74,1,1,0,0,0,75,76,3,40,
        20,0,76,77,3,50,25,0,77,79,5,1,0,0,78,80,3,36,18,0,79,78,1,0,0,0,
        79,80,1,0,0,0,80,81,1,0,0,0,81,82,5,2,0,0,82,83,3,4,2,0,83,3,1,0,
        0,0,84,88,5,3,0,0,85,87,3,6,3,0,86,85,1,0,0,0,87,90,1,0,0,0,88,86,
        1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,88,1,0,0,0,91,92,5,4,0,0,
        92,5,1,0,0,0,93,105,3,8,4,0,94,105,3,10,5,0,95,105,3,12,6,0,96,105,
        3,16,8,0,97,105,3,18,9,0,98,105,3,20,10,0,99,105,3,22,11,0,100,105,
        3,30,15,0,101,105,3,32,16,0,102,105,3,2,1,0,103,105,3,34,17,0,104,
        93,1,0,0,0,104,94,1,0,0,0,104,95,1,0,0,0,104,96,1,0,0,0,104,97,1,
        0,0,0,104,98,1,0,0,0,104,99,1,0,0,0,104,100,1,0,0,0,104,101,1,0,
        0,0,104,102,1,0,0,0,104,103,1,0,0,0,105,7,1,0,0,0,106,107,3,40,20,
        0,107,110,3,50,25,0,108,109,5,5,0,0,109,111,3,42,21,0,110,108,1,
        0,0,0,110,111,1,0,0,0,111,113,1,0,0,0,112,114,5,6,0,0,113,112,1,
        0,0,0,113,114,1,0,0,0,114,9,1,0,0,0,115,116,5,7,0,0,116,124,5,1,
        0,0,117,119,3,8,4,0,118,117,1,0,0,0,118,119,1,0,0,0,119,125,1,0,
        0,0,120,125,1,0,0,0,121,123,3,44,22,0,122,121,1,0,0,0,122,123,1,
        0,0,0,123,125,1,0,0,0,124,118,1,0,0,0,124,120,1,0,0,0,124,122,1,
        0,0,0,125,126,1,0,0,0,126,128,5,6,0,0,127,129,3,54,27,0,128,127,
        1,0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,130,132,5,6,0,0,131,133,
        3,46,23,0,132,131,1,0,0,0,132,133,1,0,0,0,133,134,1,0,0,0,134,135,
        5,2,0,0,135,136,3,4,2,0,136,11,1,0,0,0,137,138,5,7,0,0,138,146,5,
        1,0,0,139,141,3,8,4,0,140,139,1,0,0,0,140,141,1,0,0,0,141,147,1,
        0,0,0,142,147,1,0,0,0,143,145,3,44,22,0,144,143,1,0,0,0,144,145,
        1,0,0,0,145,147,1,0,0,0,146,140,1,0,0,0,146,142,1,0,0,0,146,144,
        1,0,0,0,147,148,1,0,0,0,148,150,5,6,0,0,149,151,3,54,27,0,150,149,
        1,0,0,0,150,151,1,0,0,0,151,152,1,0,0,0,152,154,5,6,0,0,153,155,
        3,46,23,0,154,153,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,157,
        5,2,0,0,157,158,3,6,3,0,158,13,1,0,0,0,159,160,3,54,27,0,160,15,
        1,0,0,0,161,162,5,8,0,0,162,163,5,1,0,0,163,164,3,14,7,0,164,165,
        5,2,0,0,165,166,3,4,2,0,166,17,1,0,0,0,167,168,5,8,0,0,168,169,5,
        1,0,0,169,170,3,14,7,0,170,171,5,2,0,0,171,172,3,6,3,0,172,19,1,
        0,0,0,173,174,5,9,0,0,174,175,5,1,0,0,175,176,3,14,7,0,176,177,5,
        2,0,0,177,179,3,4,2,0,178,180,3,24,12,0,179,178,1,0,0,0,179,180,
        1,0,0,0,180,21,1,0,0,0,181,182,5,9,0,0,182,183,5,1,0,0,183,184,3,
        14,7,0,184,185,5,2,0,0,185,187,3,6,3,0,186,188,3,24,12,0,187,186,
        1,0,0,0,187,188,1,0,0,0,188,23,1,0,0,0,189,193,5,10,0,0,190,194,
        3,4,2,0,191,194,3,20,10,0,192,194,3,6,3,0,193,190,1,0,0,0,193,191,
        1,0,0,0,193,192,1,0,0,0,194,25,1,0,0,0,195,196,5,39,0,0,196,198,
        5,1,0,0,197,199,3,28,14,0,198,197,1,0,0,0,198,199,1,0,0,0,199,200,
        1,0,0,0,200,201,5,2,0,0,201,27,1,0,0,0,202,207,3,42,21,0,203,204,
        5,11,0,0,204,206,3,42,21,0,205,203,1,0,0,0,206,209,1,0,0,0,207,205,
        1,0,0,0,207,208,1,0,0,0,208,29,1,0,0,0,209,207,1,0,0,0,210,212,5,
        12,0,0,211,213,3,42,21,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,
        1,0,0,0,214,215,5,6,0,0,215,31,1,0,0,0,216,217,3,42,21,0,217,218,
        5,6,0,0,218,33,1,0,0,0,219,220,5,13,0,0,220,221,5,44,0,0,221,35,
        1,0,0,0,222,227,3,38,19,0,223,224,5,11,0,0,224,226,3,38,19,0,225,
        223,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,
        37,1,0,0,0,229,227,1,0,0,0,230,231,3,40,20,0,231,232,3,50,25,0,232,
        39,1,0,0,0,233,234,7,0,0,0,234,41,1,0,0,0,235,236,3,44,22,0,236,
        43,1,0,0,0,237,238,3,46,23,0,238,239,3,52,26,0,239,240,3,44,22,0,
        240,243,1,0,0,0,241,243,3,54,27,0,242,237,1,0,0,0,242,241,1,0,0,
        0,243,45,1,0,0,0,244,245,6,23,-1,0,245,246,7,1,0,0,246,249,3,46,
        23,3,247,249,3,50,25,0,248,244,1,0,0,0,248,247,1,0,0,0,249,254,1,
        0,0,0,250,251,10,2,0,0,251,253,7,1,0,0,252,250,1,0,0,0,253,256,1,
        0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,47,1,0,0,0,256,254,1,0,
        0,0,257,258,7,2,0,0,258,49,1,0,0,0,259,271,5,39,0,0,260,271,5,40,
        0,0,261,271,5,42,0,0,262,271,5,43,0,0,263,271,5,44,0,0,264,271,5,
        41,0,0,265,271,3,26,13,0,266,267,5,1,0,0,267,268,3,42,21,0,268,269,
        5,2,0,0,269,271,1,0,0,0,270,259,1,0,0,0,270,260,1,0,0,0,270,261,
        1,0,0,0,270,262,1,0,0,0,270,263,1,0,0,0,270,264,1,0,0,0,270,265,
        1,0,0,0,270,266,1,0,0,0,271,51,1,0,0,0,272,273,7,3,0,0,273,53,1,
        0,0,0,274,279,3,56,28,0,275,276,5,28,0,0,276,278,3,56,28,0,277,275,
        1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,55,1,
        0,0,0,281,279,1,0,0,0,282,287,3,58,29,0,283,284,5,29,0,0,284,286,
        3,58,29,0,285,283,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,
        1,0,0,0,288,57,1,0,0,0,289,287,1,0,0,0,290,295,3,60,30,0,291,292,
        7,4,0,0,292,294,3,60,30,0,293,291,1,0,0,0,294,297,1,0,0,0,295,293,
        1,0,0,0,295,296,1,0,0,0,296,59,1,0,0,0,297,295,1,0,0,0,298,303,3,
        62,31,0,299,300,7,2,0,0,300,302,3,62,31,0,301,299,1,0,0,0,302,305,
        1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,61,1,0,0,0,305,303,1,
        0,0,0,306,311,3,64,32,0,307,308,7,5,0,0,308,310,3,64,32,0,309,307,
        1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,63,1,
        0,0,0,313,311,1,0,0,0,314,319,3,46,23,0,315,316,7,6,0,0,316,318,
        3,46,23,0,317,315,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,
        1,0,0,0,320,65,1,0,0,0,321,319,1,0,0,0,322,325,3,62,31,0,323,325,
        3,64,32,0,324,322,1,0,0,0,324,323,1,0,0,0,325,67,1,0,0,0,34,71,79,
        88,104,110,113,118,122,124,128,132,140,144,146,150,154,179,187,193,
        198,207,212,227,242,248,254,270,279,287,295,303,311,319,324
=======
        4,1,46,328,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,
        4,0,68,8,0,11,0,12,0,69,1,0,1,0,1,1,1,1,1,1,1,1,3,1,78,8,1,1,1,1,
        1,1,1,1,2,1,2,5,2,85,8,2,10,2,12,2,88,9,2,1,2,1,2,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,103,8,3,1,4,1,4,5,4,107,8,4,10,
        4,12,4,110,9,4,1,4,1,4,1,4,3,4,115,8,4,1,4,3,4,118,8,4,1,5,1,5,1,
        5,3,5,123,8,5,1,5,1,5,3,5,127,8,5,3,5,129,8,5,1,5,1,5,3,5,133,8,
        5,1,5,1,5,3,5,137,8,5,1,5,1,5,1,5,1,6,1,6,1,6,3,6,145,8,6,1,6,1,
        6,3,6,149,8,6,3,6,151,8,6,1,6,1,6,3,6,155,8,6,1,6,1,6,3,6,159,8,
        6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,185,8,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,3,11,194,8,11,1,12,1,12,1,12,3,12,199,8,
        12,1,12,1,12,1,13,1,13,1,13,5,13,206,8,13,10,13,12,13,209,9,13,1,
        14,1,14,3,14,213,8,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,
        17,1,17,1,17,5,17,226,8,17,10,17,12,17,229,9,17,1,18,1,18,1,18,1,
        19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,3,21,243,8,21,1,22,1,
        22,1,22,1,22,3,22,249,8,22,1,22,1,22,5,22,253,8,22,10,22,12,22,256,
        9,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,3,24,272,8,24,1,25,1,25,1,26,1,26,1,26,5,26,279,8,26,10,
        26,12,26,282,9,26,1,27,1,27,1,27,5,27,287,8,27,10,27,12,27,290,9,
        27,1,28,1,28,1,28,5,28,295,8,28,10,28,12,28,298,9,28,1,29,1,29,1,
        29,5,29,303,8,29,10,29,12,29,306,9,29,1,30,1,30,1,30,5,30,311,8,
        30,10,30,12,30,314,9,30,1,31,1,31,1,31,5,31,319,8,31,10,31,12,31,
        322,9,31,1,32,1,32,3,32,326,8,32,1,32,0,1,44,33,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,0,7,1,0,14,17,1,0,18,19,1,0,20,23,2,0,5,5,24,27,1,0,
        30,31,1,0,32,33,2,0,34,35,43,43,346,0,67,1,0,0,0,2,73,1,0,0,0,4,
        82,1,0,0,0,6,102,1,0,0,0,8,104,1,0,0,0,10,119,1,0,0,0,12,141,1,0,
        0,0,14,163,1,0,0,0,16,165,1,0,0,0,18,171,1,0,0,0,20,177,1,0,0,0,
        22,186,1,0,0,0,24,195,1,0,0,0,26,202,1,0,0,0,28,210,1,0,0,0,30,216,
        1,0,0,0,32,219,1,0,0,0,34,222,1,0,0,0,36,230,1,0,0,0,38,233,1,0,
        0,0,40,235,1,0,0,0,42,242,1,0,0,0,44,248,1,0,0,0,46,257,1,0,0,0,
        48,271,1,0,0,0,50,273,1,0,0,0,52,275,1,0,0,0,54,283,1,0,0,0,56,291,
        1,0,0,0,58,299,1,0,0,0,60,307,1,0,0,0,62,315,1,0,0,0,64,325,1,0,
        0,0,66,68,3,6,3,0,67,66,1,0,0,0,68,69,1,0,0,0,69,67,1,0,0,0,69,70,
        1,0,0,0,70,71,1,0,0,0,71,72,5,0,0,1,72,1,1,0,0,0,73,74,3,38,19,0,
        74,75,3,48,24,0,75,77,5,1,0,0,76,78,3,34,17,0,77,76,1,0,0,0,77,78,
        1,0,0,0,78,79,1,0,0,0,79,80,5,2,0,0,80,81,3,4,2,0,81,3,1,0,0,0,82,
        86,5,3,0,0,83,85,3,6,3,0,84,83,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,
        0,86,87,1,0,0,0,87,89,1,0,0,0,88,86,1,0,0,0,89,90,5,4,0,0,90,5,1,
        0,0,0,91,103,3,8,4,0,92,103,3,10,5,0,93,103,3,12,6,0,94,103,3,16,
        8,0,95,103,3,18,9,0,96,103,3,20,10,0,97,103,3,22,11,0,98,103,3,28,
        14,0,99,103,3,30,15,0,100,103,3,2,1,0,101,103,3,32,16,0,102,91,1,
        0,0,0,102,92,1,0,0,0,102,93,1,0,0,0,102,94,1,0,0,0,102,95,1,0,0,
        0,102,96,1,0,0,0,102,97,1,0,0,0,102,98,1,0,0,0,102,99,1,0,0,0,102,
        100,1,0,0,0,102,101,1,0,0,0,103,7,1,0,0,0,104,108,3,38,19,0,105,
        107,5,43,0,0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,
        109,1,0,0,0,109,111,1,0,0,0,110,108,1,0,0,0,111,114,3,48,24,0,112,
        113,5,5,0,0,113,115,3,40,20,0,114,112,1,0,0,0,114,115,1,0,0,0,115,
        117,1,0,0,0,116,118,5,6,0,0,117,116,1,0,0,0,117,118,1,0,0,0,118,
        9,1,0,0,0,119,120,5,7,0,0,120,128,5,1,0,0,121,123,3,8,4,0,122,121,
        1,0,0,0,122,123,1,0,0,0,123,129,1,0,0,0,124,129,1,0,0,0,125,127,
        3,42,21,0,126,125,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,128,122,
        1,0,0,0,128,124,1,0,0,0,128,126,1,0,0,0,129,130,1,0,0,0,130,132,
        5,6,0,0,131,133,3,52,26,0,132,131,1,0,0,0,132,133,1,0,0,0,133,134,
        1,0,0,0,134,136,5,6,0,0,135,137,3,44,22,0,136,135,1,0,0,0,136,137,
        1,0,0,0,137,138,1,0,0,0,138,139,5,2,0,0,139,140,3,4,2,0,140,11,1,
        0,0,0,141,142,5,7,0,0,142,150,5,1,0,0,143,145,3,8,4,0,144,143,1,
        0,0,0,144,145,1,0,0,0,145,151,1,0,0,0,146,151,1,0,0,0,147,149,3,
        42,21,0,148,147,1,0,0,0,148,149,1,0,0,0,149,151,1,0,0,0,150,144,
        1,0,0,0,150,146,1,0,0,0,150,148,1,0,0,0,151,152,1,0,0,0,152,154,
        5,6,0,0,153,155,3,52,26,0,154,153,1,0,0,0,154,155,1,0,0,0,155,156,
        1,0,0,0,156,158,5,6,0,0,157,159,3,44,22,0,158,157,1,0,0,0,158,159,
        1,0,0,0,159,160,1,0,0,0,160,161,5,2,0,0,161,162,3,6,3,0,162,13,1,
        0,0,0,163,164,3,52,26,0,164,15,1,0,0,0,165,166,5,8,0,0,166,167,5,
        1,0,0,167,168,3,14,7,0,168,169,5,2,0,0,169,170,3,4,2,0,170,17,1,
        0,0,0,171,172,5,8,0,0,172,173,5,1,0,0,173,174,3,14,7,0,174,175,5,
        2,0,0,175,176,3,6,3,0,176,19,1,0,0,0,177,178,5,9,0,0,178,179,5,1,
        0,0,179,180,3,14,7,0,180,181,5,2,0,0,181,184,3,4,2,0,182,183,5,10,
        0,0,183,185,3,4,2,0,184,182,1,0,0,0,184,185,1,0,0,0,185,21,1,0,0,
        0,186,187,5,9,0,0,187,188,5,1,0,0,188,189,3,14,7,0,189,190,5,2,0,
        0,190,193,3,6,3,0,191,192,5,10,0,0,192,194,3,6,3,0,193,191,1,0,0,
        0,193,194,1,0,0,0,194,23,1,0,0,0,195,196,5,38,0,0,196,198,5,1,0,
        0,197,199,3,26,13,0,198,197,1,0,0,0,198,199,1,0,0,0,199,200,1,0,
        0,0,200,201,5,2,0,0,201,25,1,0,0,0,202,207,3,40,20,0,203,204,5,11,
        0,0,204,206,3,40,20,0,205,203,1,0,0,0,206,209,1,0,0,0,207,205,1,
        0,0,0,207,208,1,0,0,0,208,27,1,0,0,0,209,207,1,0,0,0,210,212,5,12,
        0,0,211,213,3,40,20,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,1,
        0,0,0,214,215,5,6,0,0,215,29,1,0,0,0,216,217,3,40,20,0,217,218,5,
        6,0,0,218,31,1,0,0,0,219,220,5,13,0,0,220,221,5,45,0,0,221,33,1,
        0,0,0,222,227,3,36,18,0,223,224,5,11,0,0,224,226,3,36,18,0,225,223,
        1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,35,1,
        0,0,0,229,227,1,0,0,0,230,231,3,38,19,0,231,232,3,48,24,0,232,37,
        1,0,0,0,233,234,7,0,0,0,234,39,1,0,0,0,235,236,3,42,21,0,236,41,
        1,0,0,0,237,238,3,44,22,0,238,239,3,50,25,0,239,240,3,42,21,0,240,
        243,1,0,0,0,241,243,3,52,26,0,242,237,1,0,0,0,242,241,1,0,0,0,243,
        43,1,0,0,0,244,245,6,22,-1,0,245,246,7,1,0,0,246,249,3,44,22,3,247,
        249,3,48,24,0,248,244,1,0,0,0,248,247,1,0,0,0,249,254,1,0,0,0,250,
        251,10,2,0,0,251,253,7,1,0,0,252,250,1,0,0,0,253,256,1,0,0,0,254,
        252,1,0,0,0,254,255,1,0,0,0,255,45,1,0,0,0,256,254,1,0,0,0,257,258,
        7,2,0,0,258,47,1,0,0,0,259,272,5,38,0,0,260,272,5,44,0,0,261,272,
        5,39,0,0,262,272,5,41,0,0,263,272,5,42,0,0,264,272,5,45,0,0,265,
        272,5,40,0,0,266,272,3,24,12,0,267,268,5,1,0,0,268,269,3,40,20,0,
        269,270,5,2,0,0,270,272,1,0,0,0,271,259,1,0,0,0,271,260,1,0,0,0,
        271,261,1,0,0,0,271,262,1,0,0,0,271,263,1,0,0,0,271,264,1,0,0,0,
        271,265,1,0,0,0,271,266,1,0,0,0,271,267,1,0,0,0,272,49,1,0,0,0,273,
        274,7,3,0,0,274,51,1,0,0,0,275,280,3,54,27,0,276,277,5,28,0,0,277,
        279,3,54,27,0,278,276,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,
        281,1,0,0,0,281,53,1,0,0,0,282,280,1,0,0,0,283,288,3,56,28,0,284,
        285,5,29,0,0,285,287,3,56,28,0,286,284,1,0,0,0,287,290,1,0,0,0,288,
        286,1,0,0,0,288,289,1,0,0,0,289,55,1,0,0,0,290,288,1,0,0,0,291,296,
        3,58,29,0,292,293,7,4,0,0,293,295,3,58,29,0,294,292,1,0,0,0,295,
        298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,57,1,0,0,0,298,296,
        1,0,0,0,299,304,3,60,30,0,300,301,7,2,0,0,301,303,3,60,30,0,302,
        300,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,
        59,1,0,0,0,306,304,1,0,0,0,307,312,3,62,31,0,308,309,7,5,0,0,309,
        311,3,62,31,0,310,308,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,
        313,1,0,0,0,313,61,1,0,0,0,314,312,1,0,0,0,315,320,3,44,22,0,316,
        317,7,6,0,0,317,319,3,44,22,0,318,316,1,0,0,0,319,322,1,0,0,0,320,
        318,1,0,0,0,320,321,1,0,0,0,321,63,1,0,0,0,322,320,1,0,0,0,323,326,
        3,60,30,0,324,326,3,62,31,0,325,323,1,0,0,0,325,324,1,0,0,0,326,
        65,1,0,0,0,34,69,77,86,102,108,114,117,122,126,128,132,136,144,148,
        150,154,158,184,193,198,207,212,227,242,248,254,271,280,288,296,
        304,312,320,325
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,1,0,4,0,88,8,0,11,0,12,0,89,1,0,1,
        0,1,1,1,1,1,1,1,1,3,1,98,8,1,1,1,1,1,1,1,1,2,1,2,5,2,105,8,2,10,
        2,12,2,108,9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,3,3,125,8,3,1,4,1,4,5,4,129,8,4,10,4,12,4,132,9,4,1,4,
        1,4,1,4,3,4,137,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,147,8,4,
        3,4,149,8,4,1,5,1,5,1,5,3,5,154,8,5,1,5,1,5,3,5,158,8,5,3,5,160,
        8,5,1,5,1,5,3,5,164,8,5,1,5,1,5,3,5,168,8,5,1,5,1,5,1,5,1,6,1,6,
        1,6,3,6,176,8,6,1,6,1,6,3,6,180,8,6,3,6,182,8,6,1,6,1,6,3,6,186,
        8,6,1,6,1,6,3,6,190,8,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,215,
        8,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,223,8,11,1,12,1,12,1,12,
        1,12,3,12,229,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,3,14,
        239,8,14,1,14,3,14,242,8,14,1,14,1,14,5,14,246,8,14,10,14,12,14,
        249,9,14,1,14,3,14,252,8,14,1,15,1,15,1,15,3,15,257,8,15,1,15,1,
        15,1,16,1,16,1,16,3,16,264,8,16,1,16,1,16,1,17,1,17,1,17,1,17,5,
        17,272,8,17,10,17,12,17,275,9,17,1,17,1,17,1,18,1,18,1,18,1,19,1,
        19,1,20,1,20,1,20,5,20,287,8,20,10,20,12,20,290,9,20,1,21,1,21,3,
        21,294,8,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,
        24,5,24,307,8,24,10,24,12,24,310,9,24,1,25,1,25,1,25,1,26,1,26,1,
        27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,328,8,
        30,1,30,3,30,331,8,30,1,30,3,30,334,8,30,1,31,1,31,1,31,1,31,1,31,
        1,31,3,31,342,8,31,1,31,1,31,5,31,346,8,31,10,31,12,31,349,9,31,
        1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        3,33,364,8,33,1,34,1,34,1,34,1,34,3,34,370,8,34,1,35,1,35,1,36,1,
        36,1,36,5,36,377,8,36,10,36,12,36,380,9,36,1,37,1,37,1,37,5,37,385,
        8,37,10,37,12,37,388,9,37,1,38,1,38,1,38,5,38,393,8,38,10,38,12,
        38,396,9,38,1,39,1,39,1,39,5,39,401,8,39,10,39,12,39,404,9,39,1,
        40,1,40,1,40,5,40,409,8,40,10,40,12,40,412,9,40,1,41,1,41,1,41,5,
        41,417,8,41,10,41,12,41,420,9,41,1,42,1,42,3,42,424,8,42,1,42,0,
        1,62,43,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        0,7,1,0,20,23,1,0,26,27,1,0,28,31,2,0,5,5,33,36,1,0,39,40,1,0,41,
        42,2,0,43,44,52,52,451,0,87,1,0,0,0,2,93,1,0,0,0,4,102,1,0,0,0,6,
        124,1,0,0,0,8,126,1,0,0,0,10,150,1,0,0,0,12,172,1,0,0,0,14,194,1,
        0,0,0,16,196,1,0,0,0,18,202,1,0,0,0,20,208,1,0,0,0,22,216,1,0,0,
        0,24,224,1,0,0,0,26,230,1,0,0,0,28,238,1,0,0,0,30,253,1,0,0,0,32,
        260,1,0,0,0,34,267,1,0,0,0,36,278,1,0,0,0,38,281,1,0,0,0,40,283,
        1,0,0,0,42,291,1,0,0,0,44,297,1,0,0,0,46,300,1,0,0,0,48,303,1,0,
        0,0,50,311,1,0,0,0,52,314,1,0,0,0,54,316,1,0,0,0,56,318,1,0,0,0,
        58,320,1,0,0,0,60,333,1,0,0,0,62,341,1,0,0,0,64,350,1,0,0,0,66,363,
        1,0,0,0,68,369,1,0,0,0,70,371,1,0,0,0,72,373,1,0,0,0,74,381,1,0,
        0,0,76,389,1,0,0,0,78,397,1,0,0,0,80,405,1,0,0,0,82,413,1,0,0,0,
        84,423,1,0,0,0,86,88,3,6,3,0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,
        0,0,0,89,90,1,0,0,0,90,91,1,0,0,0,91,92,5,0,0,1,92,1,1,0,0,0,93,
        94,3,52,26,0,94,95,3,66,33,0,95,97,5,1,0,0,96,98,3,48,24,0,97,96,
        1,0,0,0,97,98,1,0,0,0,98,99,1,0,0,0,99,100,5,2,0,0,100,101,3,4,2,
        0,101,3,1,0,0,0,102,106,5,3,0,0,103,105,3,6,3,0,104,103,1,0,0,0,
        105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,109,1,0,0,0,
        108,106,1,0,0,0,109,110,5,4,0,0,110,5,1,0,0,0,111,125,3,8,4,0,112,
        125,3,10,5,0,113,125,3,12,6,0,114,125,3,16,8,0,115,125,3,18,9,0,
        116,125,3,20,10,0,117,125,3,22,11,0,118,125,3,42,21,0,119,125,3,
        26,13,0,120,125,3,28,14,0,121,125,3,44,22,0,122,125,3,2,1,0,123,
        125,3,46,23,0,124,111,1,0,0,0,124,112,1,0,0,0,124,113,1,0,0,0,124,
        114,1,0,0,0,124,115,1,0,0,0,124,116,1,0,0,0,124,117,1,0,0,0,124,
        118,1,0,0,0,124,119,1,0,0,0,124,120,1,0,0,0,124,121,1,0,0,0,124,
        122,1,0,0,0,124,123,1,0,0,0,125,7,1,0,0,0,126,130,3,52,26,0,127,
        129,5,52,0,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,
        131,1,0,0,0,131,136,1,0,0,0,132,130,1,0,0,0,133,137,3,66,33,0,134,
        137,1,0,0,0,135,137,3,32,16,0,136,133,1,0,0,0,136,134,1,0,0,0,136,
        135,1,0,0,0,137,148,1,0,0,0,138,146,5,5,0,0,139,147,3,6,3,0,140,
        141,3,38,19,0,141,142,5,6,0,0,142,147,1,0,0,0,143,144,3,36,18,0,
        144,145,5,6,0,0,145,147,1,0,0,0,146,139,1,0,0,0,146,140,1,0,0,0,
        146,143,1,0,0,0,147,149,1,0,0,0,148,138,1,0,0,0,148,149,1,0,0,0,
        149,9,1,0,0,0,150,151,5,7,0,0,151,159,5,1,0,0,152,154,3,8,4,0,153,
        152,1,0,0,0,153,154,1,0,0,0,154,160,1,0,0,0,155,160,1,0,0,0,156,
        158,3,60,30,0,157,156,1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,
        153,1,0,0,0,159,155,1,0,0,0,159,157,1,0,0,0,160,161,1,0,0,0,161,
        163,5,6,0,0,162,164,3,72,36,0,163,162,1,0,0,0,163,164,1,0,0,0,164,
        165,1,0,0,0,165,167,5,6,0,0,166,168,3,62,31,0,167,166,1,0,0,0,167,
        168,1,0,0,0,168,169,1,0,0,0,169,170,5,2,0,0,170,171,3,4,2,0,171,
        11,1,0,0,0,172,173,5,7,0,0,173,181,5,1,0,0,174,176,3,8,4,0,175,174,
        1,0,0,0,175,176,1,0,0,0,176,182,1,0,0,0,177,182,1,0,0,0,178,180,
        3,60,30,0,179,178,1,0,0,0,179,180,1,0,0,0,180,182,1,0,0,0,181,175,
        1,0,0,0,181,177,1,0,0,0,181,179,1,0,0,0,182,183,1,0,0,0,183,185,
        5,6,0,0,184,186,3,72,36,0,185,184,1,0,0,0,185,186,1,0,0,0,186,187,
        1,0,0,0,187,189,5,6,0,0,188,190,3,62,31,0,189,188,1,0,0,0,189,190,
        1,0,0,0,190,191,1,0,0,0,191,192,5,2,0,0,192,193,3,6,3,0,193,13,1,
        0,0,0,194,195,3,72,36,0,195,15,1,0,0,0,196,197,5,8,0,0,197,198,5,
        1,0,0,198,199,3,14,7,0,199,200,5,2,0,0,200,201,3,4,2,0,201,17,1,
        0,0,0,202,203,5,8,0,0,203,204,5,1,0,0,204,205,3,14,7,0,205,206,5,
        2,0,0,206,207,3,6,3,0,207,19,1,0,0,0,208,209,5,9,0,0,209,210,5,1,
        0,0,210,211,3,14,7,0,211,212,5,2,0,0,212,214,3,4,2,0,213,215,3,24,
        12,0,214,213,1,0,0,0,214,215,1,0,0,0,215,21,1,0,0,0,216,217,5,9,
        0,0,217,218,5,1,0,0,218,219,3,14,7,0,219,220,5,2,0,0,220,222,3,6,
        3,0,221,223,3,24,12,0,222,221,1,0,0,0,222,223,1,0,0,0,223,23,1,0,
        0,0,224,228,5,10,0,0,225,229,3,4,2,0,226,229,3,20,10,0,227,229,3,
        6,3,0,228,225,1,0,0,0,228,226,1,0,0,0,228,227,1,0,0,0,229,25,1,0,
        0,0,230,231,5,11,0,0,231,232,5,1,0,0,232,233,3,14,7,0,233,234,5,
        2,0,0,234,235,3,4,2,0,235,27,1,0,0,0,236,239,5,12,0,0,237,239,3,
        56,28,0,238,236,1,0,0,0,238,237,1,0,0,0,239,241,1,0,0,0,240,242,
        3,66,33,0,241,240,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,247,
        5,13,0,0,244,246,3,6,3,0,245,244,1,0,0,0,246,249,1,0,0,0,247,245,
        1,0,0,0,247,248,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,250,252,
        3,58,29,0,251,250,1,0,0,0,251,252,1,0,0,0,252,29,1,0,0,0,253,254,
        5,47,0,0,254,256,5,1,0,0,255,257,3,40,20,0,256,255,1,0,0,0,256,257,
        1,0,0,0,257,258,1,0,0,0,258,259,5,2,0,0,259,31,1,0,0,0,260,261,3,
        66,33,0,261,263,5,14,0,0,262,264,3,66,33,0,263,262,1,0,0,0,263,264,
        1,0,0,0,264,265,1,0,0,0,265,266,5,15,0,0,266,33,1,0,0,0,267,268,
        5,3,0,0,268,273,3,66,33,0,269,270,5,16,0,0,270,272,3,66,33,0,271,
        269,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,
        276,1,0,0,0,275,273,1,0,0,0,276,277,5,4,0,0,277,35,1,0,0,0,278,279,
        5,3,0,0,279,280,5,4,0,0,280,37,1,0,0,0,281,282,5,17,0,0,282,39,1,
        0,0,0,283,288,3,54,27,0,284,285,5,16,0,0,285,287,3,54,27,0,286,284,
        1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,41,1,
        0,0,0,290,288,1,0,0,0,291,293,5,18,0,0,292,294,3,54,27,0,293,292,
        1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,5,6,0,0,296,43,1,
        0,0,0,297,298,3,54,27,0,298,299,5,6,0,0,299,45,1,0,0,0,300,301,5,
        19,0,0,301,302,5,53,0,0,302,47,1,0,0,0,303,308,3,50,25,0,304,305,
        5,16,0,0,305,307,3,50,25,0,306,304,1,0,0,0,307,310,1,0,0,0,308,306,
        1,0,0,0,308,309,1,0,0,0,309,49,1,0,0,0,310,308,1,0,0,0,311,312,3,
        52,26,0,312,313,3,66,33,0,313,51,1,0,0,0,314,315,7,0,0,0,315,53,
        1,0,0,0,316,317,3,60,30,0,317,55,1,0,0,0,318,319,5,24,0,0,319,57,
        1,0,0,0,320,321,5,25,0,0,321,322,5,6,0,0,322,59,1,0,0,0,323,324,
        3,62,31,0,324,325,3,70,35,0,325,327,3,60,30,0,326,328,3,38,19,0,
        327,326,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,331,3,36,18,
        0,330,329,1,0,0,0,330,331,1,0,0,0,331,334,1,0,0,0,332,334,3,72,36,
        0,333,323,1,0,0,0,333,332,1,0,0,0,334,61,1,0,0,0,335,336,6,31,-1,
        0,336,337,7,1,0,0,337,342,3,62,31,5,338,342,3,68,34,0,339,342,3,
        66,33,0,340,342,3,34,17,0,341,335,1,0,0,0,341,338,1,0,0,0,341,339,
        1,0,0,0,341,340,1,0,0,0,342,347,1,0,0,0,343,344,10,4,0,0,344,346,
        7,1,0,0,345,343,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,
        1,0,0,0,348,63,1,0,0,0,349,347,1,0,0,0,350,351,7,2,0,0,351,65,1,
        0,0,0,352,364,5,47,0,0,353,364,5,48,0,0,354,364,5,50,0,0,355,364,
        5,51,0,0,356,364,5,53,0,0,357,364,5,49,0,0,358,364,3,30,15,0,359,
        360,5,1,0,0,360,361,3,54,27,0,361,362,5,2,0,0,362,364,1,0,0,0,363,
        352,1,0,0,0,363,353,1,0,0,0,363,354,1,0,0,0,363,355,1,0,0,0,363,
        356,1,0,0,0,363,357,1,0,0,0,363,358,1,0,0,0,363,359,1,0,0,0,364,
        67,1,0,0,0,365,366,5,32,0,0,366,370,3,66,33,0,367,368,5,52,0,0,368,
        370,3,66,33,0,369,365,1,0,0,0,369,367,1,0,0,0,370,69,1,0,0,0,371,
        372,7,3,0,0,372,71,1,0,0,0,373,378,3,74,37,0,374,375,5,37,0,0,375,
        377,3,74,37,0,376,374,1,0,0,0,377,380,1,0,0,0,378,376,1,0,0,0,378,
        379,1,0,0,0,379,73,1,0,0,0,380,378,1,0,0,0,381,386,3,76,38,0,382,
        383,5,38,0,0,383,385,3,76,38,0,384,382,1,0,0,0,385,388,1,0,0,0,386,
        384,1,0,0,0,386,387,1,0,0,0,387,75,1,0,0,0,388,386,1,0,0,0,389,394,
        3,78,39,0,390,391,7,4,0,0,391,393,3,78,39,0,392,390,1,0,0,0,393,
        396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,77,1,0,0,0,396,394,
        1,0,0,0,397,402,3,80,40,0,398,399,7,2,0,0,399,401,3,80,40,0,400,
        398,1,0,0,0,401,404,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,403,
        79,1,0,0,0,404,402,1,0,0,0,405,410,3,82,41,0,406,407,7,5,0,0,407,
        409,3,82,41,0,408,406,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,
        411,1,0,0,0,411,81,1,0,0,0,412,410,1,0,0,0,413,418,3,62,31,0,414,
        415,7,6,0,0,415,417,3,62,31,0,416,414,1,0,0,0,417,420,1,0,0,0,418,
        416,1,0,0,0,418,419,1,0,0,0,419,83,1,0,0,0,420,418,1,0,0,0,421,424,
        3,80,40,0,422,424,3,82,41,0,423,421,1,0,0,0,423,422,1,0,0,0,424,
        85,1,0,0,0,45,89,97,106,124,130,136,146,148,153,157,159,163,167,
        175,179,181,185,189,214,222,228,238,241,247,251,256,263,273,288,
        293,308,327,330,333,341,347,363,369,378,386,394,402,410,418,423
>>>>>>> maria-new
    ]

class CASSParser ( Parser ):

    grammarFileName = "CASS.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'('", "')'", "'{'", "'}'", "'='", "';'", 
                     "'for'", "'while'", "'if'", "'else'", "'switch'", "'case'", 
                     "':'", "'['", "']'", "','", "'nullptr'", "'return'", 
                     "'include'", "'int'", "'float'", "'double'", "'void'", 
                     "'default'", "'break'", "'++'", "'--'", "'>'", "'<'", 
                     "'<='", "'>='", "'&'", "'+='", "'-='", "'*='", "'/='", 
                     "'||'", "'&&'", "'=='", "'!='", "'+'", "'-'", "'/'", 
                     "'%'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'*'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "SL_COMMENT", "ML_COMMENT", "ID", "INT", 
                      "BOOL", "FLOAT", "CHAR", "POINTER", "STRING", "WS" ]

    RULE_prog = 0
    RULE_functionDefinition = 1
    RULE_compoundStatement = 2
    RULE_statement = 3
    RULE_declarationStatement = 4
    RULE_forBlockStatement = 5
    RULE_forSingleStatement = 6
    RULE_conditionClause = 7
    RULE_whileBlockStatement = 8
    RULE_whileSingleStatement = 9
    RULE_ifBlockStatement = 10
    RULE_ifSingleStatement = 11
<<<<<<< HEAD
<<<<<<< HEAD
=======
<<<<<<< HEAD
    RULE_functionCall = 12
    RULE_argumentList = 13
    RULE_returnStatement = 14
    RULE_expressionStatement = 15
    RULE_includeStatement = 16
    RULE_parameterList = 17
    RULE_parameter = 18
    RULE_typeSpec = 19
    RULE_expression = 20
    RULE_assignmentExpression = 21
    RULE_unaryExpression = 22
    RULE_comparingExpression = 23
    RULE_primaryExpression = 24
    RULE_pointerExpression = 25
=======
>>>>>>> maria-new
    RULE_elseClause = 12
    RULE_functionCall = 13
    RULE_argumentList = 14
    RULE_returnStatement = 15
    RULE_expressionStatement = 16
    RULE_includeStatement = 17
    RULE_parameterList = 18
    RULE_parameter = 19
    RULE_typeSpec = 20
    RULE_expression = 21
    RULE_assignmentExpression = 22
    RULE_unaryExpression = 23
    RULE_comparingExpression = 24
    RULE_primaryExpression = 25
<<<<<<< HEAD
    RULE_pointerExpression = 26
    RULE_assignmentOperator = 27
    RULE_logicalOrExpression = 28
    RULE_logicalAndExpression = 29
    RULE_equalityExpression = 30
    RULE_relationalExpression = 31
    RULE_additiveExpression = 32
    RULE_multiplicativeExpression = 33
    RULE_operationExpression = 34
=======
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
    RULE_assignmentOperator = 26
    RULE_logicalOrExpression = 27
    RULE_logicalAndExpression = 28
    RULE_equalityExpression = 29
    RULE_relationalExpression = 30
    RULE_additiveExpression = 31
    RULE_multiplicativeExpression = 32
    RULE_operationExpression = 33
>>>>>>> maria-new
=======
    RULE_elseClause = 12
    RULE_switchStatement = 13
    RULE_caseStatement = 14
    RULE_functionCall = 15
    RULE_arrayDeclarator = 16
    RULE_listInitializer = 17
    RULE_emptyInitializer = 18
    RULE_nullptr = 19
    RULE_argumentList = 20
    RULE_returnStatement = 21
    RULE_expressionStatement = 22
    RULE_includeStatement = 23
    RULE_parameterList = 24
    RULE_parameter = 25
    RULE_typeSpec = 26
    RULE_expression = 27
    RULE_defaultExpression = 28
    RULE_breakExpression = 29
    RULE_assignmentExpression = 30
    RULE_unaryExpression = 31
    RULE_comparingExpression = 32
    RULE_primaryExpression = 33
    RULE_pointerExpression = 34
    RULE_assignmentOperator = 35
    RULE_logicalOrExpression = 36
    RULE_logicalAndExpression = 37
    RULE_equalityExpression = 38
    RULE_relationalExpression = 39
    RULE_additiveExpression = 40
    RULE_multiplicativeExpression = 41
    RULE_operationExpression = 42
>>>>>>> maria-new

    ruleNames =  [ "prog", "functionDefinition", "compoundStatement", "statement", 
                   "declarationStatement", "forBlockStatement", "forSingleStatement", 
                   "conditionClause", "whileBlockStatement", "whileSingleStatement", 
                   "ifBlockStatement", "ifSingleStatement", "elseClause", 
                   "switchStatement", "caseStatement", "functionCall", "arrayDeclarator", 
                   "listInitializer", "emptyInitializer", "nullptr", "argumentList", 
                   "returnStatement", "expressionStatement", "includeStatement", 
                   "parameterList", "parameter", "typeSpec", "expression", 
                   "defaultExpression", "breakExpression", "assignmentExpression", 
                   "unaryExpression", "comparingExpression", "primaryExpression", 
                   "pointerExpression", "assignmentOperator", "logicalOrExpression", 
                   "logicalAndExpression", "equalityExpression", "relationalExpression", 
                   "additiveExpression", "multiplicativeExpression", "operationExpression" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    SL_COMMENT=45
    ML_COMMENT=46
    ID=47
    INT=48
    BOOL=49
    FLOAT=50
    CHAR=51
    POINTER=52
    STRING=53
    WS=54

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CASSParser.EOF, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.StatementContext)
            else:
                return self.getTypedRuleContext(CASSParser.StatementContext,i)


        def getRuleIndex(self):
            return CASSParser.RULE_prog

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProg" ):
                listener.enterProg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProg" ):
                listener.exitProg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProg" ):
                return visitor.visitProg(self)
            else:
                return visitor.visitChildren(self)




    def prog(self):

        localctx = CASSParser.ProgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_prog)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 71 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 70
                self.statement()
                self.state = 73 
=======
            self.state = 69 
=======
            self.state = 87 
>>>>>>> maria-new
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 86
                self.statement()
<<<<<<< HEAD
                self.state = 71 
>>>>>>> maria-new
=======
                self.state = 89 
>>>>>>> maria-new
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 17873665550719882) != 0)):
                    break

<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 75
=======
            self.state = 73
>>>>>>> maria-new
=======
            self.state = 91
>>>>>>> maria-new
            self.match(CASSParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpec(self):
            return self.getTypedRuleContext(CASSParser.TypeSpecContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(CASSParser.PrimaryExpressionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CASSParser.CompoundStatementContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(CASSParser.ParameterListContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = CASSParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 77
            self.typeSpec()
            self.state = 78
            self.primaryExpression()
            self.state = 79
            self.match(CASSParser.T__0)
            self.state = 81
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 245760) != 0):
                self.state = 80
                self.parameterList()


            self.state = 83
            self.match(CASSParser.T__1)
            self.state = 84
=======
            self.state = 75
=======
            self.state = 93
>>>>>>> maria-new
            self.typeSpec()
            self.state = 94
            self.primaryExpression()
            self.state = 95
            self.match(CASSParser.T__0)
            self.state = 97
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15728640) != 0):
                self.state = 96
                self.parameterList()


            self.state = 99
            self.match(CASSParser.T__1)
<<<<<<< HEAD
            self.state = 82
>>>>>>> maria-new
=======
            self.state = 100
>>>>>>> maria-new
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.StatementContext)
            else:
                return self.getTypedRuleContext(CASSParser.StatementContext,i)


        def getRuleIndex(self):
            return CASSParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatement" ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = CASSParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 86
            self.match(CASSParser.T__2)
            self.state = 90
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819006186370) != 0):
                self.state = 87
                self.statement()
                self.state = 92
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 93
=======
            self.state = 84
=======
            self.state = 102
>>>>>>> maria-new
            self.match(CASSParser.T__2)
            self.state = 106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 17873665550719882) != 0):
                self.state = 103
                self.statement()
                self.state = 108
                self._errHandler.sync(self)
                _la = self._input.LA(1)

<<<<<<< HEAD
            self.state = 91
>>>>>>> maria-new
=======
            self.state = 109
>>>>>>> maria-new
            self.match(CASSParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationStatement(self):
            return self.getTypedRuleContext(CASSParser.DeclarationStatementContext,0)


        def forBlockStatement(self):
            return self.getTypedRuleContext(CASSParser.ForBlockStatementContext,0)


        def forSingleStatement(self):
            return self.getTypedRuleContext(CASSParser.ForSingleStatementContext,0)


        def whileBlockStatement(self):
            return self.getTypedRuleContext(CASSParser.WhileBlockStatementContext,0)


        def whileSingleStatement(self):
            return self.getTypedRuleContext(CASSParser.WhileSingleStatementContext,0)


        def ifBlockStatement(self):
            return self.getTypedRuleContext(CASSParser.IfBlockStatementContext,0)


        def ifSingleStatement(self):
            return self.getTypedRuleContext(CASSParser.IfSingleStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(CASSParser.ReturnStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(CASSParser.SwitchStatementContext,0)


        def caseStatement(self):
            return self.getTypedRuleContext(CASSParser.CaseStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CASSParser.ExpressionStatementContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(CASSParser.FunctionDefinitionContext,0)


        def includeStatement(self):
            return self.getTypedRuleContext(CASSParser.IncludeStatementContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = CASSParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_statement)
        try:
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 106
=======
            self.state = 104
>>>>>>> maria-new
=======
            self.state = 124
>>>>>>> maria-new
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 95
=======
                self.state = 93
>>>>>>> maria-new
=======
                self.state = 111
>>>>>>> maria-new
                self.declarationStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 96
=======
                self.state = 94
>>>>>>> maria-new
=======
                self.state = 112
>>>>>>> maria-new
                self.forBlockStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 97
=======
                self.state = 95
>>>>>>> maria-new
=======
                self.state = 113
>>>>>>> maria-new
                self.forSingleStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 98
=======
                self.state = 96
>>>>>>> maria-new
=======
                self.state = 114
>>>>>>> maria-new
                self.whileBlockStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 99
=======
                self.state = 97
>>>>>>> maria-new
=======
                self.state = 115
>>>>>>> maria-new
                self.whileSingleStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 100
=======
                self.state = 98
>>>>>>> maria-new
=======
                self.state = 116
>>>>>>> maria-new
                self.ifBlockStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 101
=======
                self.state = 99
>>>>>>> maria-new
=======
                self.state = 117
>>>>>>> maria-new
                self.ifSingleStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 102
=======
                self.state = 100
>>>>>>> maria-new
=======
                self.state = 118
>>>>>>> maria-new
                self.returnStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 103
=======
                self.state = 101
>>>>>>> maria-new
                self.expressionStatement()
=======
                self.state = 119
                self.switchStatement()
>>>>>>> maria-new
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 104
=======
                self.state = 102
>>>>>>> maria-new
                self.functionDefinition()
=======
                self.state = 120
                self.caseStatement()
>>>>>>> maria-new
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 105
=======
                self.state = 103
>>>>>>> maria-new
=======
                self.state = 121
                self.expressionStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 122
                self.functionDefinition()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 123
>>>>>>> maria-new
                self.includeStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpec(self):
            return self.getTypedRuleContext(CASSParser.TypeSpecContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(CASSParser.PrimaryExpressionContext,0)


        def arrayDeclarator(self):
            return self.getTypedRuleContext(CASSParser.ArrayDeclaratorContext,0)


        def POINTER(self, i:int=None):
            if i is None:
                return self.getTokens(CASSParser.POINTER)
            else:
                return self.getToken(CASSParser.POINTER, i)

        def statement(self):
            return self.getTypedRuleContext(CASSParser.StatementContext,0)


        def nullptr(self):
            return self.getTypedRuleContext(CASSParser.NullptrContext,0)


        def emptyInitializer(self):
            return self.getTypedRuleContext(CASSParser.EmptyInitializerContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_declarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationStatement" ):
                listener.enterDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationStatement" ):
                listener.exitDeclarationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationStatement" ):
                return visitor.visitDeclarationStatement(self)
            else:
                return visitor.visitChildren(self)




    def declarationStatement(self):

        localctx = CASSParser.DeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_declarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 108
            self.typeSpec()
            self.state = 112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==44:
                self.state = 109
                self.match(CASSParser.POINTER)
                self.state = 114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 115
            self.primaryExpression()
            self.state = 118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 116
                self.match(CASSParser.T__4)
                self.state = 117
                self.expression()


            self.state = 121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 120
=======
            self.state = 106
=======
            self.state = 126
>>>>>>> maria-new
            self.typeSpec()
            self.state = 130
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 127
                    self.match(CASSParser.POINTER) 
                self.state = 132
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 133
                self.primaryExpression()
                pass

            elif la_ == 2:
                pass

            elif la_ == 3:
                self.state = 135
                self.arrayDeclarator()
                pass


            self.state = 148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 138
                self.match(CASSParser.T__4)
                self.state = 146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 139
                    self.statement()
                    pass

                elif la_ == 2:
                    self.state = 140
                    self.nullptr()
                    self.state = 141
                    self.match(CASSParser.T__5)
                    pass

                elif la_ == 3:
                    self.state = 143
                    self.emptyInitializer()
                    self.state = 144
                    self.match(CASSParser.T__5)
                    pass


<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 118
=======
            self.state = 113
=======
                self.state = 112
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
                self.match(CASSParser.T__4)
                self.state = 115
                self.expression()


<<<<<<< HEAD
            self.state = 119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 118
=======
            self.state = 117
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
<<<<<<< HEAD
                self.state = 112
=======
                self.state = 116
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
                self.match(CASSParser.T__5)
=======
>>>>>>> maria-new


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForBlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(CASSParser.CompoundStatementContext,0)


        def logicalOrExpression(self):
            return self.getTypedRuleContext(CASSParser.LogicalOrExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CASSParser.UnaryExpressionContext,0)


        def declarationStatement(self):
            return self.getTypedRuleContext(CASSParser.DeclarationStatementContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CASSParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_forBlockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForBlockStatement" ):
                listener.enterForBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForBlockStatement" ):
                listener.exitForBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForBlockStatement" ):
                return visitor.visitForBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def forBlockStatement(self):

        localctx = CASSParser.ForBlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_forBlockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 123
            self.match(CASSParser.T__6)
            self.state = 124
            self.match(CASSParser.T__0)
            self.state = 132
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 245760) != 0):
                    self.state = 125
=======
<<<<<<< HEAD
            self.state = 121
=======
<<<<<<< HEAD
            self.state = 121
=======
<<<<<<< HEAD
            self.state = 115
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
=======
            self.state = 150
>>>>>>> maria-new
            self.match(CASSParser.T__6)
            self.state = 151
            self.match(CASSParser.T__0)
            self.state = 159
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
<<<<<<< HEAD
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 245760) != 0):
                    self.state = 123
=======
            self.state = 128
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 245760) != 0):
<<<<<<< HEAD
                    self.state = 123
=======
                    self.state = 117
=======
                self.state = 122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 245760) != 0):
                    self.state = 121
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15728640) != 0):
                    self.state = 152
>>>>>>> maria-new
                    self.declarationStatement()


                pass

            elif la_ == 2:
                pass

            elif la_ == 3:
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819005927426) != 0):
                    self.state = 129
=======
<<<<<<< HEAD
                self.state = 128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 61297774034946) != 0):
                    self.state = 127
=======
<<<<<<< HEAD
                self.state = 128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819005927426) != 0):
                    self.state = 127
=======
<<<<<<< HEAD
                self.state = 122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 34634617061378) != 0):
                    self.state = 121
=======
                self.state = 126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 61297774034946) != 0):
                    self.state = 125
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 17873665517420554) != 0):
                    self.state = 156
>>>>>>> maria-new
                    self.assignmentExpression()


                pass


<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 134
            self.match(CASSParser.T__5)
            self.state = 136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819005927426) != 0):
                self.state = 135
                self.logicalOrExpression()


            self.state = 138
            self.match(CASSParser.T__5)
            self.state = 140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819005927426) != 0):
                self.state = 139
                self.unaryExpression(0)


            self.state = 142
            self.match(CASSParser.T__1)
            self.state = 143
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
            self.state = 126
=======
            self.state = 161
>>>>>>> maria-new
            self.match(CASSParser.T__5)
            self.state = 163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 17873665517420554) != 0):
                self.state = 162
                self.logicalOrExpression()


            self.state = 165
            self.match(CASSParser.T__5)
            self.state = 167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 17873665517420554) != 0):
                self.state = 166
                self.unaryExpression(0)


            self.state = 169
            self.match(CASSParser.T__1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 141
=======
<<<<<<< HEAD
            self.state = 141
=======
            self.state = 139
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 170
>>>>>>> maria-new
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForSingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CASSParser.StatementContext,0)


        def logicalOrExpression(self):
            return self.getTypedRuleContext(CASSParser.LogicalOrExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CASSParser.UnaryExpressionContext,0)


        def declarationStatement(self):
            return self.getTypedRuleContext(CASSParser.DeclarationStatementContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CASSParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_forSingleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForSingleStatement" ):
                listener.enterForSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForSingleStatement" ):
                listener.exitForSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForSingleStatement" ):
                return visitor.visitForSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def forSingleStatement(self):

        localctx = CASSParser.ForSingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_forSingleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 145
            self.match(CASSParser.T__6)
            self.state = 146
            self.match(CASSParser.T__0)
            self.state = 154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 245760) != 0):
                    self.state = 147
=======
<<<<<<< HEAD
            self.state = 143
=======
<<<<<<< HEAD
            self.state = 143
=======
<<<<<<< HEAD
            self.state = 137
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
=======
            self.state = 172
>>>>>>> maria-new
            self.match(CASSParser.T__6)
            self.state = 173
            self.match(CASSParser.T__0)
            self.state = 181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
<<<<<<< HEAD
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 245760) != 0):
                    self.state = 145
=======
            self.state = 150
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 245760) != 0):
<<<<<<< HEAD
                    self.state = 145
=======
                    self.state = 139
=======
                self.state = 144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 245760) != 0):
                    self.state = 143
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15728640) != 0):
                    self.state = 174
>>>>>>> maria-new
                    self.declarationStatement()


                pass

            elif la_ == 2:
                pass

            elif la_ == 3:
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819005927426) != 0):
                    self.state = 151
=======
<<<<<<< HEAD
                self.state = 150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 61297774034946) != 0):
                    self.state = 149
=======
<<<<<<< HEAD
                self.state = 150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819005927426) != 0):
                    self.state = 149
=======
<<<<<<< HEAD
                self.state = 144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 34634617061378) != 0):
                    self.state = 143
=======
                self.state = 148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 61297774034946) != 0):
                    self.state = 147
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 17873665517420554) != 0):
                    self.state = 178
>>>>>>> maria-new
                    self.assignmentExpression()


                pass


<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 156
            self.match(CASSParser.T__5)
            self.state = 158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819005927426) != 0):
                self.state = 157
                self.logicalOrExpression()


            self.state = 160
            self.match(CASSParser.T__5)
            self.state = 162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819005927426) != 0):
                self.state = 161
                self.unaryExpression(0)


            self.state = 164
            self.match(CASSParser.T__1)
            self.state = 165
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
            self.state = 148
=======
            self.state = 183
>>>>>>> maria-new
            self.match(CASSParser.T__5)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 17873665517420554) != 0):
                self.state = 184
                self.logicalOrExpression()


            self.state = 187
            self.match(CASSParser.T__5)
            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 17873665517420554) != 0):
                self.state = 188
                self.unaryExpression(0)


            self.state = 191
            self.match(CASSParser.T__1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 163
=======
<<<<<<< HEAD
            self.state = 163
=======
            self.state = 161
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 192
>>>>>>> maria-new
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CASSParser.LogicalOrExpressionContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_conditionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionClause" ):
                listener.enterConditionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionClause" ):
                listener.exitConditionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionClause" ):
                return visitor.visitConditionClause(self)
            else:
                return visitor.visitChildren(self)




    def conditionClause(self):

        localctx = CASSParser.ConditionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_conditionClause)
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 167
=======
<<<<<<< HEAD
            self.state = 165
=======
<<<<<<< HEAD
            self.state = 165
=======
<<<<<<< HEAD
            self.state = 159
=======
            self.state = 163
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 194
>>>>>>> maria-new
            self.logicalOrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileBlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionClause(self):
            return self.getTypedRuleContext(CASSParser.ConditionClauseContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CASSParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_whileBlockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileBlockStatement" ):
                listener.enterWhileBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileBlockStatement" ):
                listener.exitWhileBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileBlockStatement" ):
                return visitor.visitWhileBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileBlockStatement(self):

        localctx = CASSParser.WhileBlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_whileBlockStatement)
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 169
            self.match(CASSParser.T__7)
            self.state = 170
            self.match(CASSParser.T__0)
            self.state = 171
            self.conditionClause()
            self.state = 172
            self.match(CASSParser.T__1)
            self.state = 173
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
            self.state = 161
=======
            self.state = 196
>>>>>>> maria-new
            self.match(CASSParser.T__7)
            self.state = 197
            self.match(CASSParser.T__0)
            self.state = 198
            self.conditionClause()
            self.state = 199
            self.match(CASSParser.T__1)
<<<<<<< HEAD
            self.state = 165
=======
            self.state = 165
            self.match(CASSParser.T__7)
            self.state = 166
            self.match(CASSParser.T__0)
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
            self.state = 167
            self.match(CASSParser.T__7)
            self.state = 168
            self.match(CASSParser.T__0)
            self.state = 169
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
            self.conditionClause()
            self.state = 170
            self.match(CASSParser.T__1)
            self.state = 171
<<<<<<< HEAD
=======
=======
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 200
>>>>>>> maria-new
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileSingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionClause(self):
            return self.getTypedRuleContext(CASSParser.ConditionClauseContext,0)


        def statement(self):
            return self.getTypedRuleContext(CASSParser.StatementContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_whileSingleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileSingleStatement" ):
                listener.enterWhileSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileSingleStatement" ):
                listener.exitWhileSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileSingleStatement" ):
                return visitor.visitWhileSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileSingleStatement(self):

        localctx = CASSParser.WhileSingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_whileSingleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 175
            self.match(CASSParser.T__7)
            self.state = 176
            self.match(CASSParser.T__0)
            self.state = 177
            self.conditionClause()
            self.state = 178
            self.match(CASSParser.T__1)
            self.state = 179
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
            self.state = 167
=======
            self.state = 202
>>>>>>> maria-new
            self.match(CASSParser.T__7)
            self.state = 203
            self.match(CASSParser.T__0)
            self.state = 204
            self.conditionClause()
            self.state = 205
            self.match(CASSParser.T__1)
<<<<<<< HEAD
            self.state = 171
=======
            self.state = 171
            self.match(CASSParser.T__7)
            self.state = 172
            self.match(CASSParser.T__0)
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
            self.state = 173
            self.match(CASSParser.T__7)
            self.state = 174
            self.match(CASSParser.T__0)
            self.state = 175
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
            self.conditionClause()
            self.state = 176
            self.match(CASSParser.T__1)
            self.state = 177
<<<<<<< HEAD
=======
=======
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 206
>>>>>>> maria-new
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfBlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionClause(self):
            return self.getTypedRuleContext(CASSParser.ConditionClauseContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CASSParser.CompoundStatementContext,0)


        def elseClause(self):
            return self.getTypedRuleContext(CASSParser.ElseClauseContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_ifBlockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfBlockStatement" ):
                listener.enterIfBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfBlockStatement" ):
                listener.exitIfBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfBlockStatement" ):
                return visitor.visitIfBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifBlockStatement(self):

        localctx = CASSParser.IfBlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_ifBlockStatement)
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 181
            self.match(CASSParser.T__8)
            self.state = 182
            self.match(CASSParser.T__0)
            self.state = 183
            self.conditionClause()
            self.state = 184
            self.match(CASSParser.T__1)
            self.state = 185
            self.compoundStatement()
            self.state = 187
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 186
                self.elseClause()
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
            self.state = 173
=======
            self.state = 208
>>>>>>> maria-new
            self.match(CASSParser.T__8)
            self.state = 209
            self.match(CASSParser.T__0)
            self.state = 210
            self.conditionClause()
            self.state = 211
            self.match(CASSParser.T__1)
            self.state = 212
            self.compoundStatement()
            self.state = 214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 213
                self.elseClause()
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
                self.state = 182
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
                self.match(CASSParser.T__9)
                self.state = 185
                self.compoundStatement()
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
>>>>>>> maria-new


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfSingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionClause(self):
            return self.getTypedRuleContext(CASSParser.ConditionClauseContext,0)


        def statement(self):
            return self.getTypedRuleContext(CASSParser.StatementContext,0)


        def elseClause(self):
            return self.getTypedRuleContext(CASSParser.ElseClauseContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_ifSingleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfSingleStatement" ):
                listener.enterIfSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfSingleStatement" ):
                listener.exitIfSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfSingleStatement" ):
                return visitor.visitIfSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifSingleStatement(self):

        localctx = CASSParser.IfSingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_ifSingleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 189
            self.match(CASSParser.T__8)
            self.state = 190
            self.match(CASSParser.T__0)
            self.state = 191
            self.conditionClause()
            self.state = 192
            self.match(CASSParser.T__1)
            self.state = 193
            self.statement()
=======
<<<<<<< HEAD
            self.state = 187
=======
            self.state = 216
>>>>>>> maria-new
            self.match(CASSParser.T__8)
            self.state = 217
            self.match(CASSParser.T__0)
            self.state = 218
            self.conditionClause()
            self.state = 219
            self.match(CASSParser.T__1)
            self.state = 220
            self.statement()
<<<<<<< HEAD
=======
            self.state = 186
            self.match(CASSParser.T__8)
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
            self.state = 187
            self.match(CASSParser.T__0)
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
            self.state = 188
            self.match(CASSParser.T__8)
            self.state = 189
            self.match(CASSParser.T__0)
            self.state = 190
            self.conditionClause()
            self.state = 191
            self.match(CASSParser.T__1)
            self.state = 192
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
            self.statement()
>>>>>>> maria-new
            self.state = 195
=======
            self.state = 222
>>>>>>> maria-new
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 194
=======
<<<<<<< HEAD
                self.state = 192
=======
<<<<<<< HEAD
                self.state = 193
                self.match(CASSParser.T__9)
                self.state = 194
=======
<<<<<<< HEAD
                self.state = 186
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 221
>>>>>>> maria-new
                self.elseClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElseClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundStatement(self):
            return self.getTypedRuleContext(CASSParser.CompoundStatementContext,0)


        def ifBlockStatement(self):
            return self.getTypedRuleContext(CASSParser.IfBlockStatementContext,0)


        def statement(self):
            return self.getTypedRuleContext(CASSParser.StatementContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_elseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElseClause" ):
                listener.enterElseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElseClause" ):
                listener.exitElseClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElseClause" ):
                return visitor.visitElseClause(self)
            else:
                return visitor.visitChildren(self)




    def elseClause(self):

        localctx = CASSParser.ElseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_elseClause)
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 197
            self.match(CASSParser.T__9)
            self.state = 201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 198
=======
            self.state = 195
=======
            self.state = 224
>>>>>>> maria-new
            self.match(CASSParser.T__9)
            self.state = 228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
<<<<<<< HEAD
                self.state = 196
>>>>>>> maria-new
=======
                self.state = 225
>>>>>>> maria-new
                self.compoundStatement()
                pass

            elif la_ == 2:
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 199
=======
                self.state = 197
>>>>>>> maria-new
=======
                self.state = 226
>>>>>>> maria-new
                self.ifBlockStatement()
                pass

            elif la_ == 3:
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 200
=======
<<<<<<< HEAD
                self.state = 198
=======
=======
                self.state = 191
                self.match(CASSParser.T__9)
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
                self.state = 192
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 227
>>>>>>> maria-new
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionClause(self):
            return self.getTypedRuleContext(CASSParser.ConditionClauseContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CASSParser.CompoundStatementContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitchStatement" ):
                return visitor.visitSwitchStatement(self)
            else:
                return visitor.visitChildren(self)




    def switchStatement(self):

        localctx = CASSParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_switchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.match(CASSParser.T__10)
            self.state = 231
            self.match(CASSParser.T__0)
            self.state = 232
            self.conditionClause()
            self.state = 233
            self.match(CASSParser.T__1)
            self.state = 234
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def defaultExpression(self):
            return self.getTypedRuleContext(CASSParser.DefaultExpressionContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(CASSParser.PrimaryExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.StatementContext)
            else:
                return self.getTypedRuleContext(CASSParser.StatementContext,i)


        def breakExpression(self):
            return self.getTypedRuleContext(CASSParser.BreakExpressionContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_caseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatement" ):
                listener.enterCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatement" ):
                listener.exitCaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseStatement" ):
                return visitor.visitCaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def caseStatement(self):

        localctx = CASSParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12]:
                self.state = 236
                self.match(CASSParser.T__11)
                pass
            elif token in [24]:
                self.state = 237
                self.defaultExpression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13370061393756162) != 0):
                self.state = 240
                self.primaryExpression()


            self.state = 243
            self.match(CASSParser.T__12)
            self.state = 247
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 244
                    self.statement() 
                self.state = 249
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 250
                self.breakExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(CASSParser.ID, 0)

        def argumentList(self):
            return self.getTypedRuleContext(CASSParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = CASSParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 203
            self.match(CASSParser.ID)
            self.state = 204
            self.match(CASSParser.T__0)
            self.state = 206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819005927426) != 0):
                self.state = 205
                self.argumentList()


            self.state = 208
=======
<<<<<<< HEAD
            self.state = 201
=======
            self.state = 253
>>>>>>> maria-new
            self.match(CASSParser.ID)
            self.state = 254
            self.match(CASSParser.T__0)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 17873665517420554) != 0):
                self.state = 255
                self.argumentList()


<<<<<<< HEAD
            self.state = 206
=======
            self.state = 197
            self.match(CASSParser.ID)
            self.state = 198
            self.match(CASSParser.T__0)
            self.state = 200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
<<<<<<< HEAD
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819005927426) != 0):
                self.state = 199
=======
<<<<<<< HEAD
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 34634617061378) != 0):
=======
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 61297774034946) != 0):
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
                self.state = 197
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
                self.argumentList()


            self.state = 202
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 258
>>>>>>> maria-new
            self.match(CASSParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(CASSParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return CASSParser.RULE_arrayDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDeclarator" ):
                listener.enterArrayDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDeclarator" ):
                listener.exitArrayDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayDeclarator" ):
                return visitor.visitArrayDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def arrayDeclarator(self):

        localctx = CASSParser.ArrayDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_arrayDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.primaryExpression()
            self.state = 261
            self.match(CASSParser.T__13)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13370061393756162) != 0):
                self.state = 262
                self.primaryExpression()


            self.state = 265
            self.match(CASSParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(CASSParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return CASSParser.RULE_listInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListInitializer" ):
                listener.enterListInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListInitializer" ):
                listener.exitListInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListInitializer" ):
                return visitor.visitListInitializer(self)
            else:
                return visitor.visitChildren(self)




    def listInitializer(self):

        localctx = CASSParser.ListInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_listInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(CASSParser.T__2)
            self.state = 268
            self.primaryExpression()
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 269
                self.match(CASSParser.T__15)
                self.state = 270
                self.primaryExpression()
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 276
            self.match(CASSParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CASSParser.RULE_emptyInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyInitializer" ):
                listener.enterEmptyInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyInitializer" ):
                listener.exitEmptyInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyInitializer" ):
                return visitor.visitEmptyInitializer(self)
            else:
                return visitor.visitChildren(self)




    def emptyInitializer(self):

        localctx = CASSParser.EmptyInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_emptyInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(CASSParser.T__2)
            self.state = 279
            self.match(CASSParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullptrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CASSParser.RULE_nullptr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullptr" ):
                listener.enterNullptr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullptr" ):
                listener.exitNullptr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullptr" ):
                return visitor.visitNullptr(self)
            else:
                return visitor.visitChildren(self)




    def nullptr(self):

        localctx = CASSParser.NullptrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_nullptr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(CASSParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CASSParser.ExpressionContext,i)


        def getRuleIndex(self):
            return CASSParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = CASSParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 210
            self.expression()
            self.state = 215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 211
                self.match(CASSParser.T__10)
                self.state = 212
                self.expression()
                self.state = 217
=======
<<<<<<< HEAD
            self.state = 208
=======
            self.state = 283
>>>>>>> maria-new
            self.expression()
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 284
                self.match(CASSParser.T__15)
                self.state = 285
                self.expression()
<<<<<<< HEAD
                self.state = 215
=======
            self.state = 204
            self.expression()
            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 205
                self.match(CASSParser.T__10)
                self.state = 206
                self.expression()
                self.state = 211
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 290
>>>>>>> maria-new
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CASSParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = CASSParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 218
            self.match(CASSParser.T__11)
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819005927426) != 0):
                self.state = 219
                self.expression()


            self.state = 222
=======
<<<<<<< HEAD
            self.state = 216
            self.match(CASSParser.T__11)
            self.state = 218
=======
            self.state = 291
            self.match(CASSParser.T__17)
            self.state = 293
>>>>>>> maria-new
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 17873665517420554) != 0):
                self.state = 292
                self.expression()


<<<<<<< HEAD
            self.state = 220
=======
            self.state = 212
            self.match(CASSParser.T__11)
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
<<<<<<< HEAD
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 69819005927426) != 0):
                self.state = 213
=======
<<<<<<< HEAD
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 34634617061378) != 0):
=======
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 61297774034946) != 0):
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
                self.state = 211
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
                self.expression()


            self.state = 216
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 295
>>>>>>> maria-new
            self.match(CASSParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CASSParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = CASSParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 224
            self.expression()
            self.state = 225
=======
<<<<<<< HEAD
            self.state = 222
            self.expression()
            self.state = 223
=======
            self.state = 218
            self.expression()
            self.state = 219
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 297
            self.expression()
            self.state = 298
>>>>>>> maria-new
            self.match(CASSParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncludeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(CASSParser.STRING, 0)

        def getRuleIndex(self):
            return CASSParser.RULE_includeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeStatement" ):
                listener.enterIncludeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeStatement" ):
                listener.exitIncludeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludeStatement" ):
                return visitor.visitIncludeStatement(self)
            else:
                return visitor.visitChildren(self)




    def includeStatement(self):

        localctx = CASSParser.IncludeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_includeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 227
            self.match(CASSParser.T__12)
            self.state = 228
=======
<<<<<<< HEAD
            self.state = 225
            self.match(CASSParser.T__12)
            self.state = 226
=======
            self.state = 221
            self.match(CASSParser.T__12)
            self.state = 222
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 300
            self.match(CASSParser.T__18)
            self.state = 301
>>>>>>> maria-new
            self.match(CASSParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.ParameterContext)
            else:
                return self.getTypedRuleContext(CASSParser.ParameterContext,i)


        def getRuleIndex(self):
            return CASSParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)




    def parameterList(self):

        localctx = CASSParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_parameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 230
            self.parameter()
            self.state = 235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 231
                self.match(CASSParser.T__10)
                self.state = 232
                self.parameter()
                self.state = 237
=======
<<<<<<< HEAD
            self.state = 228
=======
            self.state = 303
>>>>>>> maria-new
            self.parameter()
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==16:
                self.state = 304
                self.match(CASSParser.T__15)
                self.state = 305
                self.parameter()
<<<<<<< HEAD
                self.state = 235
=======
            self.state = 224
            self.parameter()
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 225
                self.match(CASSParser.T__10)
                self.state = 226
                self.parameter()
                self.state = 231
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 310
>>>>>>> maria-new
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpec(self):
            return self.getTypedRuleContext(CASSParser.TypeSpecContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(CASSParser.PrimaryExpressionContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = CASSParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 238
            self.typeSpec()
            self.state = 239
=======
<<<<<<< HEAD
            self.state = 236
            self.typeSpec()
            self.state = 237
=======
            self.state = 232
            self.typeSpec()
            self.state = 233
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 311
            self.typeSpec()
            self.state = 312
>>>>>>> maria-new
            self.primaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CASSParser.RULE_typeSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpec" ):
                listener.enterTypeSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpec" ):
                listener.exitTypeSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpec" ):
                return visitor.visitTypeSpec(self)
            else:
                return visitor.visitChildren(self)




    def typeSpec(self):

        localctx = CASSParser.TypeSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_typeSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 241
=======
<<<<<<< HEAD
            self.state = 239
=======
            self.state = 235
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 314
>>>>>>> maria-new
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 15728640) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CASSParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = CASSParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 243
=======
<<<<<<< HEAD
            self.state = 241
=======
            self.state = 237
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 316
>>>>>>> maria-new
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CASSParser.RULE_defaultExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultExpression" ):
                listener.enterDefaultExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultExpression" ):
                listener.exitDefaultExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultExpression" ):
                return visitor.visitDefaultExpression(self)
            else:
                return visitor.visitChildren(self)




    def defaultExpression(self):

        localctx = CASSParser.DefaultExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_defaultExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(CASSParser.T__23)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CASSParser.RULE_breakExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakExpression" ):
                listener.enterBreakExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakExpression" ):
                listener.exitBreakExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakExpression" ):
                return visitor.visitBreakExpression(self)
            else:
                return visitor.visitChildren(self)




    def breakExpression(self):

        localctx = CASSParser.BreakExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_breakExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(CASSParser.T__24)
            self.state = 321
            self.match(CASSParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(CASSParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(CASSParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CASSParser.AssignmentExpressionContext,0)


        def nullptr(self):
            return self.getTypedRuleContext(CASSParser.NullptrContext,0)


        def emptyInitializer(self):
            return self.getTypedRuleContext(CASSParser.EmptyInitializerContext,0)


        def logicalOrExpression(self):
            return self.getTypedRuleContext(CASSParser.LogicalOrExpressionContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentExpression" ):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)




    def assignmentExpression(self):

        localctx = CASSParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_assignmentExpression)
        try:
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 250
=======
<<<<<<< HEAD
            self.state = 248
=======
            self.state = 244
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 333
>>>>>>> maria-new
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 245
                self.unaryExpression(0)
                self.state = 246
                self.assignmentOperator()
                self.state = 247
=======
<<<<<<< HEAD
                self.state = 243
=======
                self.state = 323
>>>>>>> maria-new
                self.unaryExpression(0)
                self.state = 324
                self.assignmentOperator()
<<<<<<< HEAD
                self.state = 245
=======
                self.state = 239
                self.unaryExpression(0)
                self.state = 240
                self.assignmentOperator()
                self.state = 241
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 325
>>>>>>> maria-new
                self.assignmentExpression()
                self.state = 327
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 326
                    self.nullptr()


                self.state = 330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 329
                    self.emptyInitializer()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 249
=======
<<<<<<< HEAD
                self.state = 247
=======
                self.state = 243
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 332
>>>>>>> maria-new
                self.logicalOrExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(CASSParser.UnaryExpressionContext,0)


        def pointerExpression(self):
            return self.getTypedRuleContext(CASSParser.PointerExpressionContext,0)


        def primaryExpression(self):
            return self.getTypedRuleContext(CASSParser.PrimaryExpressionContext,0)


        def listInitializer(self):
            return self.getTypedRuleContext(CASSParser.ListInitializerContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)



    def unaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CASSParser.UnaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_unaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 257
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19]:
                self.state = 253
=======
<<<<<<< HEAD
            self.state = 254
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19]:
                self.state = 251
=======
            self.state = 251
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19]:
                self.state = 247
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26, 27]:
                self.state = 336
>>>>>>> maria-new
                _la = self._input.LA(1)
                if not(_la==26 or _la==27):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 254
                self.unaryExpression(4)
                pass
            elif token in [24, 44]:
                self.state = 255
                self.pointerExpression()
                pass
            elif token in [1, 39, 40, 41, 42, 43, 45]:
                self.state = 256
=======
<<<<<<< HEAD
                self.state = 252
                self.unaryExpression(3)
=======
                self.state = 337
                self.unaryExpression(5)
>>>>>>> maria-new
                pass
            elif token in [32, 52]:
                self.state = 338
                self.pointerExpression()
                pass
<<<<<<< HEAD
            elif token in [1, 39, 40, 41, 42, 43, 45]:
                self.state = 250
=======
<<<<<<< HEAD
            elif token in [1, 39, 40, 41, 42, 43, 44]:
=======
            elif token in [1, 38, 39, 40, 41, 42, 44, 45]:
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
                self.state = 247
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            elif token in [1, 47, 48, 49, 50, 51, 53]:
                self.state = 339
>>>>>>> maria-new
                self.primaryExpression()
                pass
            elif token in [3]:
                self.state = 340
                self.listInitializer()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 263
=======
<<<<<<< HEAD
            self.state = 260
=======
            self.state = 257
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 347
>>>>>>> maria-new
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CASSParser.UnaryExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_unaryExpression)
<<<<<<< HEAD
<<<<<<< HEAD
                    self.state = 259
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 260
=======
<<<<<<< HEAD
                    self.state = 256
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 257
=======
                    self.state = 253
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 254
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                    self.state = 343
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 344
>>>>>>> maria-new
                    _la = self._input.LA(1)
                    if not(_la==26 or _la==27):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 265
=======
<<<<<<< HEAD
                self.state = 262
=======
                self.state = 259
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 349
>>>>>>> maria-new
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparingExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CASSParser.RULE_comparingExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparingExpression" ):
                listener.enterComparingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparingExpression" ):
                listener.exitComparingExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparingExpression" ):
                return visitor.visitComparingExpression(self)
            else:
                return visitor.visitChildren(self)




    def comparingExpression(self):

        localctx = CASSParser.ComparingExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_comparingExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 266
=======
<<<<<<< HEAD
            self.state = 263
=======
            self.state = 260
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 350
>>>>>>> maria-new
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4026531840) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(CASSParser.ID, 0)

        def INT(self):
            return self.getToken(CASSParser.INT, 0)

        def FLOAT(self):
            return self.getToken(CASSParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(CASSParser.CHAR, 0)

        def STRING(self):
            return self.getToken(CASSParser.STRING, 0)

        def BOOL(self):
            return self.getToken(CASSParser.BOOL, 0)

        def functionCall(self):
            return self.getTypedRuleContext(CASSParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(CASSParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = CASSParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_primaryExpression)
        try:
<<<<<<< HEAD
<<<<<<< HEAD
            self.state = 279
=======
<<<<<<< HEAD
            self.state = 277
=======
<<<<<<< HEAD
            self.state = 273
=======
<<<<<<< HEAD
            self.state = 270
=======
            self.state = 271
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            self.state = 363
>>>>>>> maria-new
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 352
                self.match(CASSParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 353
                self.match(CASSParser.INT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 354
                self.match(CASSParser.FLOAT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 355
                self.match(CASSParser.CHAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 356
                self.match(CASSParser.STRING)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 273
                self.match(CASSParser.BOOL)
=======
<<<<<<< HEAD
                self.state = 270
                self.match(CASSParser.STRING)
=======
<<<<<<< HEAD
                self.state = 267
                self.match(CASSParser.BOOL)
=======
                self.state = 264
<<<<<<< HEAD
                self.match(CASSParser.BOOL)
=======
                self.match(CASSParser.STRING)
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 357
                self.match(CASSParser.BOOL)
>>>>>>> maria-new
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 274
                self.functionCall()
=======
<<<<<<< HEAD
                self.state = 271
                self.match(CASSParser.BOOL)
=======
<<<<<<< HEAD
                self.state = 268
                self.functionCall()
=======
                self.state = 265
<<<<<<< HEAD
                self.functionCall()
=======
                self.match(CASSParser.BOOL)
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 358
                self.functionCall()
>>>>>>> maria-new
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 275
                self.match(CASSParser.T__0)
                self.state = 276
                self.expression()
                self.state = 277
=======
<<<<<<< HEAD
                self.state = 272
=======
<<<<<<< HEAD
                self.state = 269
=======
                self.state = 359
>>>>>>> maria-new
                self.match(CASSParser.T__0)
                self.state = 360
                self.expression()
<<<<<<< HEAD
                self.state = 271
=======
                self.state = 266
<<<<<<< HEAD
                self.match(CASSParser.T__0)
                self.state = 267
                self.expression()
                self.state = 268
=======
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
                self.functionCall()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 273
                self.match(CASSParser.T__0)
                self.state = 274
                self.expression()
<<<<<<< HEAD
                self.state = 275
=======
                self.state = 269
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 361
>>>>>>> maria-new
                self.match(CASSParser.T__1)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(CASSParser.PrimaryExpressionContext,0)


        def POINTER(self):
            return self.getToken(CASSParser.POINTER, 0)

        def getRuleIndex(self):
            return CASSParser.RULE_pointerExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerExpression" ):
                listener.enterPointerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerExpression" ):
                listener.exitPointerExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerExpression" ):
                return visitor.visitPointerExpression(self)
            else:
                return visitor.visitChildren(self)




    def pointerExpression(self):

        localctx = CASSParser.PointerExpressionContext(self, self._ctx, self.state)
<<<<<<< HEAD
<<<<<<< HEAD
        self.enterRule(localctx, 52, self.RULE_pointerExpression)
        try:
            self.state = 285
=======
        self.enterRule(localctx, 50, self.RULE_pointerExpression)
        try:
            self.state = 279
>>>>>>> maria-new
=======
        self.enterRule(localctx, 68, self.RULE_pointerExpression)
        try:
            self.state = 369
>>>>>>> maria-new
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32]:
                self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 281
                self.match(CASSParser.T__23)
                self.state = 282
=======
                self.state = 275
                self.match(CASSParser.T__23)
                self.state = 276
>>>>>>> maria-new
=======
                self.state = 365
                self.match(CASSParser.T__31)
                self.state = 366
>>>>>>> maria-new
                self.primaryExpression()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 283
                self.match(CASSParser.POINTER)
                self.state = 284
=======
                self.state = 277
                self.match(CASSParser.POINTER)
                self.state = 278
>>>>>>> maria-new
=======
                self.state = 367
                self.match(CASSParser.POINTER)
                self.state = 368
>>>>>>> maria-new
                self.primaryExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CASSParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = CASSParser.AssignmentOperatorContext(self, self._ctx, self.state)
<<<<<<< HEAD
<<<<<<< HEAD
        self.enterRule(localctx, 54, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
=======
        self.enterRule(localctx, 52, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
            self.state = 279
=======
<<<<<<< HEAD
            self.state = 281
=======
<<<<<<< HEAD
            self.state = 272
=======
            self.state = 273
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
        self.enterRule(localctx, 70, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
>>>>>>> maria-new
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 128849018912) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(CASSParser.LogicalAndExpressionContext,i)


        def getRuleIndex(self):
            return CASSParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalOrExpression(self):

        localctx = CASSParser.LogicalOrExpressionContext(self, self._ctx, self.state)
<<<<<<< HEAD
<<<<<<< HEAD
        self.enterRule(localctx, 56, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self.logicalAndExpression()
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29:
                self.state = 290
                self.match(CASSParser.T__28)
                self.state = 291
                self.logicalAndExpression()
                self.state = 296
=======
        self.enterRule(localctx, 54, self.RULE_logicalOrExpression)
=======
        self.enterRule(localctx, 72, self.RULE_logicalOrExpression)
>>>>>>> maria-new
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.logicalAndExpression()
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==37:
                self.state = 374
                self.match(CASSParser.T__36)
                self.state = 375
                self.logicalAndExpression()
<<<<<<< HEAD
                self.state = 288
=======
                self.state = 275
                self.match(CASSParser.T__27)
                self.state = 276
                self.logicalAndExpression()
                self.state = 281
=======
            self.state = 275
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
            self.logicalAndExpression()
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29:
                self.state = 284
                self.match(CASSParser.T__28)
                self.state = 285
                self.logicalAndExpression()
<<<<<<< HEAD
                self.state = 290
=======
                self.state = 282
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 380
>>>>>>> maria-new
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(CASSParser.EqualityExpressionContext,i)


        def getRuleIndex(self):
            return CASSParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)




    def logicalAndExpression(self):

        localctx = CASSParser.LogicalAndExpressionContext(self, self._ctx, self.state)
<<<<<<< HEAD
<<<<<<< HEAD
        self.enterRule(localctx, 58, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.equalityExpression()
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==30:
                self.state = 298
                self.match(CASSParser.T__29)
                self.state = 299
                self.equalityExpression()
                self.state = 304
=======
        self.enterRule(localctx, 56, self.RULE_logicalAndExpression)
=======
        self.enterRule(localctx, 74, self.RULE_logicalAndExpression)
>>>>>>> maria-new
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.equalityExpression()
            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==38:
                self.state = 382
                self.match(CASSParser.T__37)
                self.state = 383
                self.equalityExpression()
<<<<<<< HEAD
                self.state = 296
=======
                self.state = 283
                self.match(CASSParser.T__28)
                self.state = 284
                self.equalityExpression()
                self.state = 289
=======
            self.state = 283
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
            self.equalityExpression()
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==30:
                self.state = 292
                self.match(CASSParser.T__29)
                self.state = 293
                self.equalityExpression()
<<<<<<< HEAD
                self.state = 298
=======
                self.state = 290
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 388
>>>>>>> maria-new
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(CASSParser.RelationalExpressionContext,i)


        def getRuleIndex(self):
            return CASSParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)




    def equalityExpression(self):

        localctx = CASSParser.EqualityExpressionContext(self, self._ctx, self.state)
<<<<<<< HEAD
<<<<<<< HEAD
        self.enterRule(localctx, 60, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.relationalExpression()
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==31 or _la==32:
                self.state = 306
=======
        self.enterRule(localctx, 58, self.RULE_equalityExpression)
=======
        self.enterRule(localctx, 76, self.RULE_equalityExpression)
>>>>>>> maria-new
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.relationalExpression()
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
<<<<<<< HEAD
            while _la==30 or _la==31:
<<<<<<< HEAD
                self.state = 298
=======
                self.state = 291
=======
            self.state = 291
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
            self.relationalExpression()
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
<<<<<<< HEAD
            while _la==31 or _la==32:
                self.state = 300
=======
            while _la==30 or _la==31:
                self.state = 292
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            while _la==39 or _la==40:
                self.state = 390
>>>>>>> maria-new
                _la = self._input.LA(1)
                if not(_la==39 or _la==40):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 307
                self.relationalExpression()
                self.state = 312
=======
<<<<<<< HEAD
                self.state = 299
                self.relationalExpression()
                self.state = 304
=======
<<<<<<< HEAD
                self.state = 301
                self.relationalExpression()
                self.state = 306
=======
<<<<<<< HEAD
                self.state = 292
                self.relationalExpression()
                self.state = 297
=======
                self.state = 293
                self.relationalExpression()
                self.state = 298
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 391
                self.relationalExpression()
                self.state = 396
>>>>>>> maria-new
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(CASSParser.AdditiveExpressionContext,i)


        def getRuleIndex(self):
            return CASSParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)




    def relationalExpression(self):

        localctx = CASSParser.RelationalExpressionContext(self, self._ctx, self.state)
<<<<<<< HEAD
<<<<<<< HEAD
        self.enterRule(localctx, 62, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.additiveExpression()
            self.state = 318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 15728640) != 0):
                self.state = 314
=======
        self.enterRule(localctx, 60, self.RULE_relationalExpression)
=======
        self.enterRule(localctx, 78, self.RULE_relationalExpression)
>>>>>>> maria-new
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.additiveExpression()
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
<<<<<<< HEAD
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 15728640) != 0):
<<<<<<< HEAD
                self.state = 306
=======
                self.state = 299
=======
            self.state = 299
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
            self.additiveExpression()
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 15728640) != 0):
<<<<<<< HEAD
                self.state = 308
=======
                self.state = 300
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4026531840) != 0):
                self.state = 398
>>>>>>> maria-new
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4026531840) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 315
                self.additiveExpression()
                self.state = 320
=======
<<<<<<< HEAD
                self.state = 307
                self.additiveExpression()
                self.state = 312
=======
<<<<<<< HEAD
                self.state = 309
                self.additiveExpression()
                self.state = 314
=======
<<<<<<< HEAD
                self.state = 300
                self.additiveExpression()
                self.state = 305
=======
                self.state = 301
                self.additiveExpression()
                self.state = 306
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 399
                self.additiveExpression()
                self.state = 404
>>>>>>> maria-new
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(CASSParser.MultiplicativeExpressionContext,i)


        def getRuleIndex(self):
            return CASSParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)




    def additiveExpression(self):

        localctx = CASSParser.AdditiveExpressionContext(self, self._ctx, self.state)
<<<<<<< HEAD
<<<<<<< HEAD
        self.enterRule(localctx, 64, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.multiplicativeExpression()
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==33 or _la==34:
                self.state = 322
=======
        self.enterRule(localctx, 62, self.RULE_additiveExpression)
=======
        self.enterRule(localctx, 80, self.RULE_additiveExpression)
>>>>>>> maria-new
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.multiplicativeExpression()
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
<<<<<<< HEAD
            while _la==32 or _la==33:
<<<<<<< HEAD
                self.state = 314
=======
                self.state = 307
=======
            self.state = 307
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
            self.multiplicativeExpression()
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
<<<<<<< HEAD
            while _la==33 or _la==34:
                self.state = 316
=======
            while _la==32 or _la==33:
                self.state = 308
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
            while _la==41 or _la==42:
                self.state = 406
>>>>>>> maria-new
                _la = self._input.LA(1)
                if not(_la==41 or _la==42):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 323
                self.multiplicativeExpression()
                self.state = 328
=======
<<<<<<< HEAD
                self.state = 315
                self.multiplicativeExpression()
                self.state = 320
=======
<<<<<<< HEAD
                self.state = 317
                self.multiplicativeExpression()
                self.state = 322
=======
<<<<<<< HEAD
                self.state = 308
                self.multiplicativeExpression()
                self.state = 313
=======
                self.state = 309
                self.multiplicativeExpression()
                self.state = 314
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 407
                self.multiplicativeExpression()
                self.state = 412
>>>>>>> maria-new
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CASSParser.UnaryExpressionContext)
            else:
                return self.getTypedRuleContext(CASSParser.UnaryExpressionContext,i)


        def POINTER(self, i:int=None):
            if i is None:
                return self.getTokens(CASSParser.POINTER)
            else:
                return self.getToken(CASSParser.POINTER, i)

        def getRuleIndex(self):
            return CASSParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeExpression(self):

        localctx = CASSParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
<<<<<<< HEAD
<<<<<<< HEAD
        self.enterRule(localctx, 66, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.unaryExpression(0)
            self.state = 334
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 330
=======
        self.enterRule(localctx, 64, self.RULE_multiplicativeExpression)
=======
        self.enterRule(localctx, 82, self.RULE_multiplicativeExpression)
>>>>>>> maria-new
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.unaryExpression(0)
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
<<<<<<< HEAD
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 120259084288) != 0):
                self.state = 315
=======
            self.state = 315
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
            self.unaryExpression(0)
            self.state = 328
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
            self._errHandler.sync(self)
<<<<<<< HEAD
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 324
>>>>>>> maria-new
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 17695265259520) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
<<<<<<< HEAD
                    self.state = 331
                    self.unaryExpression(0) 
                self.state = 336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
=======
                    self.state = 325
                    self.unaryExpression(0) 
                self.state = 330
=======
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8847632629760) != 0):
                self.state = 322
=======
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4529987906437120) != 0):
                self.state = 414
>>>>>>> maria-new
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4529987906437120) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 415
                self.unaryExpression(0)
                self.state = 420
                self._errHandler.sync(self)
<<<<<<< HEAD
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
>>>>>>> maria-new
=======
                _la = self._input.LA(1)
>>>>>>> maria-new

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(CASSParser.AdditiveExpressionContext,0)


        def multiplicativeExpression(self):
            return self.getTypedRuleContext(CASSParser.MultiplicativeExpressionContext,0)


        def getRuleIndex(self):
            return CASSParser.RULE_operationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperationExpression" ):
                listener.enterOperationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperationExpression" ):
                listener.exitOperationExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperationExpression" ):
                return visitor.visitOperationExpression(self)
            else:
                return visitor.visitChildren(self)




    def operationExpression(self):

        localctx = CASSParser.OperationExpressionContext(self, self._ctx, self.state)
<<<<<<< HEAD
<<<<<<< HEAD
        self.enterRule(localctx, 68, self.RULE_operationExpression)
        try:
            self.state = 339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 337
=======
        self.enterRule(localctx, 66, self.RULE_operationExpression)
=======
        self.enterRule(localctx, 84, self.RULE_operationExpression)
>>>>>>> maria-new
        try:
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 329
=======
<<<<<<< HEAD
                self.state = 331
=======
<<<<<<< HEAD
                self.state = 322
=======
                self.state = 323
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 421
>>>>>>> maria-new
                self.additiveExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
<<<<<<< HEAD
<<<<<<< HEAD
                self.state = 338
=======
<<<<<<< HEAD
                self.state = 330
=======
<<<<<<< HEAD
                self.state = 332
=======
<<<<<<< HEAD
                self.state = 323
=======
                self.state = 324
>>>>>>> cbefaa0f782a20f67bc7627dcf1294c1b85e4d78
>>>>>>> c94456b9d0efc9550097aa4f809f580b6100a6b3
>>>>>>> e2301c7fc8f51cf76518d2738e9e9b298dc63a4a
>>>>>>> maria-new
=======
                self.state = 422
>>>>>>> maria-new
                self.multiplicativeExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[31] = self.unaryExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def unaryExpression_sempred(self, localctx:UnaryExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 4)
         




