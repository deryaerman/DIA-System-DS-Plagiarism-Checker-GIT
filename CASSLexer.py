# Generated from CASS.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,41,305,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,
        1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,
        1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
        1,33,1,33,1,33,1,33,5,33,194,8,33,10,33,12,33,197,9,33,1,33,1,33,
        1,34,1,34,1,34,1,34,5,34,205,8,34,10,34,12,34,208,9,34,1,34,1,34,
        1,34,1,34,1,34,1,35,1,35,5,35,217,8,35,10,35,12,35,220,9,35,1,36,
        4,36,223,8,36,11,36,12,36,224,1,37,4,37,228,8,37,11,37,12,37,229,
        1,37,1,37,4,37,234,8,37,11,37,12,37,235,1,37,1,37,3,37,240,8,37,
        1,37,4,37,243,8,37,11,37,12,37,244,3,37,247,8,37,1,37,1,37,4,37,
        251,8,37,11,37,12,37,252,1,37,1,37,3,37,257,8,37,1,37,4,37,260,8,
        37,11,37,12,37,261,3,37,264,8,37,1,37,4,37,267,8,37,11,37,12,37,
        268,1,37,1,37,3,37,273,8,37,1,37,4,37,276,8,37,11,37,12,37,277,3,
        37,280,8,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,5,39,289,8,39,10,
        39,12,39,292,9,39,1,39,1,39,1,40,1,40,1,40,1,41,4,41,300,8,41,11,
        41,12,41,301,1,41,1,41,1,206,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,0,83,41,1,0,10,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,
        2,0,65,90,97,122,2,0,34,34,92,92,8,0,34,34,39,39,92,92,98,98,102,
        102,110,110,114,114,116,116,3,0,9,10,13,13,32,32,324,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,83,1,0,0,0,1,85,
        1,0,0,0,3,87,1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,95,
        1,0,0,0,13,97,1,0,0,0,15,101,1,0,0,0,17,107,1,0,0,0,19,110,1,0,0,
        0,21,115,1,0,0,0,23,117,1,0,0,0,25,124,1,0,0,0,27,128,1,0,0,0,29,
        134,1,0,0,0,31,141,1,0,0,0,33,144,1,0,0,0,35,147,1,0,0,0,37,150,
        1,0,0,0,39,153,1,0,0,0,41,156,1,0,0,0,43,159,1,0,0,0,45,162,1,0,
        0,0,47,165,1,0,0,0,49,168,1,0,0,0,51,171,1,0,0,0,53,173,1,0,0,0,
        55,175,1,0,0,0,57,178,1,0,0,0,59,181,1,0,0,0,61,183,1,0,0,0,63,185,
        1,0,0,0,65,187,1,0,0,0,67,189,1,0,0,0,69,200,1,0,0,0,71,214,1,0,
        0,0,73,222,1,0,0,0,75,279,1,0,0,0,77,281,1,0,0,0,79,285,1,0,0,0,
        81,295,1,0,0,0,83,299,1,0,0,0,85,86,5,40,0,0,86,2,1,0,0,0,87,88,
        5,41,0,0,88,4,1,0,0,0,89,90,5,123,0,0,90,6,1,0,0,0,91,92,5,125,0,
        0,92,8,1,0,0,0,93,94,5,61,0,0,94,10,1,0,0,0,95,96,5,59,0,0,96,12,
        1,0,0,0,97,98,5,102,0,0,98,99,5,111,0,0,99,100,5,114,0,0,100,14,
        1,0,0,0,101,102,5,119,0,0,102,103,5,104,0,0,103,104,5,105,0,0,104,
        105,5,108,0,0,105,106,5,101,0,0,106,16,1,0,0,0,107,108,5,105,0,0,
        108,109,5,102,0,0,109,18,1,0,0,0,110,111,5,101,0,0,111,112,5,108,
        0,0,112,113,5,115,0,0,113,114,5,101,0,0,114,20,1,0,0,0,115,116,5,
        44,0,0,116,22,1,0,0,0,117,118,5,114,0,0,118,119,5,101,0,0,119,120,
        5,116,0,0,120,121,5,117,0,0,121,122,5,114,0,0,122,123,5,110,0,0,
        123,24,1,0,0,0,124,125,5,105,0,0,125,126,5,110,0,0,126,127,5,116,
        0,0,127,26,1,0,0,0,128,129,5,102,0,0,129,130,5,108,0,0,130,131,5,
        111,0,0,131,132,5,97,0,0,132,133,5,116,0,0,133,28,1,0,0,0,134,135,
        5,100,0,0,135,136,5,111,0,0,136,137,5,117,0,0,137,138,5,98,0,0,138,
        139,5,108,0,0,139,140,5,101,0,0,140,30,1,0,0,0,141,142,5,43,0,0,
        142,143,5,43,0,0,143,32,1,0,0,0,144,145,5,45,0,0,145,146,5,45,0,
        0,146,34,1,0,0,0,147,148,5,43,0,0,148,149,5,61,0,0,149,36,1,0,0,
        0,150,151,5,45,0,0,151,152,5,61,0,0,152,38,1,0,0,0,153,154,5,42,
        0,0,154,155,5,61,0,0,155,40,1,0,0,0,156,157,5,47,0,0,157,158,5,61,
        0,0,158,42,1,0,0,0,159,160,5,124,0,0,160,161,5,124,0,0,161,44,1,
        0,0,0,162,163,5,38,0,0,163,164,5,38,0,0,164,46,1,0,0,0,165,166,5,
        61,0,0,166,167,5,61,0,0,167,48,1,0,0,0,168,169,5,33,0,0,169,170,
        5,61,0,0,170,50,1,0,0,0,171,172,5,60,0,0,172,52,1,0,0,0,173,174,
        5,62,0,0,174,54,1,0,0,0,175,176,5,60,0,0,176,177,5,61,0,0,177,56,
        1,0,0,0,178,179,5,62,0,0,179,180,5,61,0,0,180,58,1,0,0,0,181,182,
        5,43,0,0,182,60,1,0,0,0,183,184,5,45,0,0,184,62,1,0,0,0,185,186,
        5,42,0,0,186,64,1,0,0,0,187,188,5,47,0,0,188,66,1,0,0,0,189,190,
        5,47,0,0,190,191,5,47,0,0,191,195,1,0,0,0,192,194,8,0,0,0,193,192,
        1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,198,
        1,0,0,0,197,195,1,0,0,0,198,199,6,33,0,0,199,68,1,0,0,0,200,201,
        5,47,0,0,201,202,5,42,0,0,202,206,1,0,0,0,203,205,9,0,0,0,204,203,
        1,0,0,0,205,208,1,0,0,0,206,207,1,0,0,0,206,204,1,0,0,0,207,209,
        1,0,0,0,208,206,1,0,0,0,209,210,5,42,0,0,210,211,5,47,0,0,211,212,
        1,0,0,0,212,213,6,34,0,0,213,70,1,0,0,0,214,218,7,1,0,0,215,217,
        7,2,0,0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,
        1,0,0,0,219,72,1,0,0,0,220,218,1,0,0,0,221,223,7,3,0,0,222,221,1,
        0,0,0,223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,74,1,0,
        0,0,226,228,7,3,0,0,227,226,1,0,0,0,228,229,1,0,0,0,229,227,1,0,
        0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,233,5,46,0,0,232,234,7,3,
        0,0,233,232,1,0,0,0,234,235,1,0,0,0,235,233,1,0,0,0,235,236,1,0,
        0,0,236,246,1,0,0,0,237,239,7,4,0,0,238,240,7,5,0,0,239,238,1,0,
        0,0,239,240,1,0,0,0,240,242,1,0,0,0,241,243,7,3,0,0,242,241,1,0,
        0,0,243,244,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,247,1,0,
        0,0,246,237,1,0,0,0,246,247,1,0,0,0,247,280,1,0,0,0,248,250,5,46,
        0,0,249,251,7,3,0,0,250,249,1,0,0,0,251,252,1,0,0,0,252,250,1,0,
        0,0,252,253,1,0,0,0,253,263,1,0,0,0,254,256,7,4,0,0,255,257,7,5,
        0,0,256,255,1,0,0,0,256,257,1,0,0,0,257,259,1,0,0,0,258,260,7,3,
        0,0,259,258,1,0,0,0,260,261,1,0,0,0,261,259,1,0,0,0,261,262,1,0,
        0,0,262,264,1,0,0,0,263,254,1,0,0,0,263,264,1,0,0,0,264,280,1,0,
        0,0,265,267,7,3,0,0,266,265,1,0,0,0,267,268,1,0,0,0,268,266,1,0,
        0,0,268,269,1,0,0,0,269,270,1,0,0,0,270,272,7,4,0,0,271,273,7,5,
        0,0,272,271,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,276,7,3,
        0,0,275,274,1,0,0,0,276,277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,
        0,0,278,280,1,0,0,0,279,227,1,0,0,0,279,248,1,0,0,0,279,266,1,0,
        0,0,280,76,1,0,0,0,281,282,5,34,0,0,282,283,7,6,0,0,283,284,5,34,
        0,0,284,78,1,0,0,0,285,290,5,34,0,0,286,289,3,81,40,0,287,289,8,
        7,0,0,288,286,1,0,0,0,288,287,1,0,0,0,289,292,1,0,0,0,290,288,1,
        0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,290,1,0,0,0,293,294,5,
        34,0,0,294,80,1,0,0,0,295,296,5,92,0,0,296,297,7,8,0,0,297,82,1,
        0,0,0,298,300,7,9,0,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,1,
        0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,304,6,41,0,0,304,84,1,
        0,0,0,21,0,195,206,218,224,229,235,239,244,246,252,256,261,263,268,
        272,277,279,288,290,301,1,6,0,0
    ]

class CASSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    SL_COMMENT = 34
    ML_COMMENT = 35
    ID = 36
    INT = 37
    FLOAT = 38
    CHAR = 39
    STRING = 40
    WS = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "'='", "';'", "'for'", "'while'", 
            "'if'", "'else'", "','", "'return'", "'int'", "'float'", "'double'", 
            "'++'", "'--'", "'+='", "'-='", "'*='", "'/='", "'||'", "'&&'", 
            "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'+'", "'-'", 
            "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "SL_COMMENT", "ML_COMMENT", "ID", "INT", "FLOAT", "CHAR", "STRING", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "SL_COMMENT", "ML_COMMENT", "ID", "INT", "FLOAT", 
                  "CHAR", "STRING", "ESC_SEQ", "WS" ]

    grammarFileName = "CASS.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


