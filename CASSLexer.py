# Generated from CASS.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,282,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,
        1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,
        1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,
        1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,5,33,188,
        8,33,10,33,12,33,191,9,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,199,
        8,34,10,34,12,34,202,9,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,5,35,
        211,8,35,10,35,12,35,214,9,35,1,36,4,36,217,8,36,11,36,12,36,218,
        1,37,4,37,222,8,37,11,37,12,37,223,1,37,1,37,4,37,228,8,37,11,37,
        12,37,229,1,37,1,37,3,37,234,8,37,1,37,4,37,237,8,37,11,37,12,37,
        238,3,37,241,8,37,1,37,1,37,4,37,245,8,37,11,37,12,37,246,1,37,1,
        37,3,37,251,8,37,1,37,4,37,254,8,37,11,37,12,37,255,3,37,258,8,37,
        1,37,4,37,261,8,37,11,37,12,37,262,1,37,1,37,3,37,267,8,37,1,37,
        4,37,270,8,37,11,37,12,37,271,3,37,274,8,37,1,38,4,38,277,8,38,11,
        38,12,38,278,1,38,1,38,1,200,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,1,0,
        7,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,3,0,9,10,13,13,32,
        32,300,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,
        0,3,81,1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,0,11,89,1,0,
        0,0,13,91,1,0,0,0,15,95,1,0,0,0,17,101,1,0,0,0,19,104,1,0,0,0,21,
        109,1,0,0,0,23,116,1,0,0,0,25,118,1,0,0,0,27,122,1,0,0,0,29,128,
        1,0,0,0,31,135,1,0,0,0,33,138,1,0,0,0,35,141,1,0,0,0,37,144,1,0,
        0,0,39,147,1,0,0,0,41,150,1,0,0,0,43,153,1,0,0,0,45,156,1,0,0,0,
        47,159,1,0,0,0,49,162,1,0,0,0,51,165,1,0,0,0,53,167,1,0,0,0,55,169,
        1,0,0,0,57,172,1,0,0,0,59,175,1,0,0,0,61,177,1,0,0,0,63,179,1,0,
        0,0,65,181,1,0,0,0,67,183,1,0,0,0,69,194,1,0,0,0,71,208,1,0,0,0,
        73,216,1,0,0,0,75,273,1,0,0,0,77,276,1,0,0,0,79,80,5,40,0,0,80,2,
        1,0,0,0,81,82,5,41,0,0,82,4,1,0,0,0,83,84,5,123,0,0,84,6,1,0,0,0,
        85,86,5,125,0,0,86,8,1,0,0,0,87,88,5,61,0,0,88,10,1,0,0,0,89,90,
        5,59,0,0,90,12,1,0,0,0,91,92,5,102,0,0,92,93,5,111,0,0,93,94,5,114,
        0,0,94,14,1,0,0,0,95,96,5,119,0,0,96,97,5,104,0,0,97,98,5,105,0,
        0,98,99,5,108,0,0,99,100,5,101,0,0,100,16,1,0,0,0,101,102,5,105,
        0,0,102,103,5,102,0,0,103,18,1,0,0,0,104,105,5,101,0,0,105,106,5,
        108,0,0,106,107,5,115,0,0,107,108,5,101,0,0,108,20,1,0,0,0,109,110,
        5,114,0,0,110,111,5,101,0,0,111,112,5,116,0,0,112,113,5,117,0,0,
        113,114,5,114,0,0,114,115,5,110,0,0,115,22,1,0,0,0,116,117,5,44,
        0,0,117,24,1,0,0,0,118,119,5,105,0,0,119,120,5,110,0,0,120,121,5,
        116,0,0,121,26,1,0,0,0,122,123,5,102,0,0,123,124,5,108,0,0,124,125,
        5,111,0,0,125,126,5,97,0,0,126,127,5,116,0,0,127,28,1,0,0,0,128,
        129,5,100,0,0,129,130,5,111,0,0,130,131,5,117,0,0,131,132,5,98,0,
        0,132,133,5,108,0,0,133,134,5,101,0,0,134,30,1,0,0,0,135,136,5,43,
        0,0,136,137,5,43,0,0,137,32,1,0,0,0,138,139,5,45,0,0,139,140,5,45,
        0,0,140,34,1,0,0,0,141,142,5,43,0,0,142,143,5,61,0,0,143,36,1,0,
        0,0,144,145,5,45,0,0,145,146,5,61,0,0,146,38,1,0,0,0,147,148,5,42,
        0,0,148,149,5,61,0,0,149,40,1,0,0,0,150,151,5,47,0,0,151,152,5,61,
        0,0,152,42,1,0,0,0,153,154,5,124,0,0,154,155,5,124,0,0,155,44,1,
        0,0,0,156,157,5,38,0,0,157,158,5,38,0,0,158,46,1,0,0,0,159,160,5,
        61,0,0,160,161,5,61,0,0,161,48,1,0,0,0,162,163,5,33,0,0,163,164,
        5,61,0,0,164,50,1,0,0,0,165,166,5,60,0,0,166,52,1,0,0,0,167,168,
        5,62,0,0,168,54,1,0,0,0,169,170,5,60,0,0,170,171,5,61,0,0,171,56,
        1,0,0,0,172,173,5,62,0,0,173,174,5,61,0,0,174,58,1,0,0,0,175,176,
        5,43,0,0,176,60,1,0,0,0,177,178,5,45,0,0,178,62,1,0,0,0,179,180,
        5,42,0,0,180,64,1,0,0,0,181,182,5,47,0,0,182,66,1,0,0,0,183,184,
        5,47,0,0,184,185,5,47,0,0,185,189,1,0,0,0,186,188,8,0,0,0,187,186,
        1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,192,
        1,0,0,0,191,189,1,0,0,0,192,193,6,33,0,0,193,68,1,0,0,0,194,195,
        5,47,0,0,195,196,5,42,0,0,196,200,1,0,0,0,197,199,9,0,0,0,198,197,
        1,0,0,0,199,202,1,0,0,0,200,201,1,0,0,0,200,198,1,0,0,0,201,203,
        1,0,0,0,202,200,1,0,0,0,203,204,5,42,0,0,204,205,5,47,0,0,205,206,
        1,0,0,0,206,207,6,34,0,0,207,70,1,0,0,0,208,212,7,1,0,0,209,211,
        7,2,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,
        1,0,0,0,213,72,1,0,0,0,214,212,1,0,0,0,215,217,7,3,0,0,216,215,1,
        0,0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,74,1,0,
        0,0,220,222,7,3,0,0,221,220,1,0,0,0,222,223,1,0,0,0,223,221,1,0,
        0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,227,5,46,0,0,226,228,7,3,
        0,0,227,226,1,0,0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,0,
        0,0,230,240,1,0,0,0,231,233,7,4,0,0,232,234,7,5,0,0,233,232,1,0,
        0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,237,7,3,0,0,236,235,1,0,
        0,0,237,238,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,241,1,0,
        0,0,240,231,1,0,0,0,240,241,1,0,0,0,241,274,1,0,0,0,242,244,5,46,
        0,0,243,245,7,3,0,0,244,243,1,0,0,0,245,246,1,0,0,0,246,244,1,0,
        0,0,246,247,1,0,0,0,247,257,1,0,0,0,248,250,7,4,0,0,249,251,7,5,
        0,0,250,249,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,254,7,3,
        0,0,253,252,1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,
        0,0,256,258,1,0,0,0,257,248,1,0,0,0,257,258,1,0,0,0,258,274,1,0,
        0,0,259,261,7,3,0,0,260,259,1,0,0,0,261,262,1,0,0,0,262,260,1,0,
        0,0,262,263,1,0,0,0,263,264,1,0,0,0,264,266,7,4,0,0,265,267,7,5,
        0,0,266,265,1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,270,7,3,
        0,0,269,268,1,0,0,0,270,271,1,0,0,0,271,269,1,0,0,0,271,272,1,0,
        0,0,272,274,1,0,0,0,273,221,1,0,0,0,273,242,1,0,0,0,273,260,1,0,
        0,0,274,76,1,0,0,0,275,277,7,6,0,0,276,275,1,0,0,0,277,278,1,0,0,
        0,278,276,1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,0,280,281,6,38,0,
        0,281,78,1,0,0,0,19,0,189,200,212,218,223,229,233,238,240,246,250,
        255,257,262,266,271,273,278,1,6,0,0
    ]

class CASSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    SL_COMMENT = 34
    ML_COMMENT = 35
    ID = 36
    INT = 37
    FLOAT = 38
    WS = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "'='", "';'", "'for'", "'while'", 
            "'if'", "'else'", "'return'", "','", "'int'", "'float'", "'double'", 
            "'++'", "'--'", "'+='", "'-='", "'*='", "'/='", "'||'", "'&&'", 
            "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'+'", "'-'", 
            "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "SL_COMMENT", "ML_COMMENT", "ID", "INT", "FLOAT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "SL_COMMENT", "ML_COMMENT", "ID", "INT", "FLOAT", 
                  "WS" ]

    grammarFileName = "CASS.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


