# Generated from CASS.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,339,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,
        17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,
        22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,
        26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,
        31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,
        36,5,36,217,8,36,10,36,12,36,220,9,36,1,36,1,36,1,37,1,37,1,37,1,
        37,5,37,228,8,37,10,37,12,37,231,9,37,1,37,1,37,1,37,1,37,1,37,1,
        38,1,38,5,38,240,8,38,10,38,12,38,243,9,38,1,39,4,39,246,8,39,11,
        39,12,39,247,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,259,
        8,40,1,41,4,41,262,8,41,11,41,12,41,263,1,41,1,41,4,41,268,8,41,
        11,41,12,41,269,1,41,1,41,3,41,274,8,41,1,41,4,41,277,8,41,11,41,
        12,41,278,3,41,281,8,41,1,41,1,41,4,41,285,8,41,11,41,12,41,286,
        1,41,1,41,3,41,291,8,41,1,41,4,41,294,8,41,11,41,12,41,295,3,41,
        298,8,41,1,41,4,41,301,8,41,11,41,12,41,302,1,41,1,41,3,41,307,8,
        41,1,41,4,41,310,8,41,11,41,12,41,311,3,41,314,8,41,1,42,1,42,1,
        42,1,42,1,43,1,43,1,43,5,43,323,8,43,10,43,12,43,326,9,43,1,43,1,
        43,1,44,1,44,1,44,1,45,4,45,334,8,45,11,45,12,45,335,1,45,1,45,1,
        229,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        0,91,45,1,0,10,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,2,
        0,65,90,97,122,2,0,34,34,92,92,8,0,34,34,39,39,92,92,98,98,102,102,
        110,110,114,114,116,116,3,0,9,10,13,13,32,32,359,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
        0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
        0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,91,1,0,0,0,1,93,1,0,0,0,3,95,1,
        0,0,0,5,97,1,0,0,0,7,99,1,0,0,0,9,101,1,0,0,0,11,103,1,0,0,0,13,
        105,1,0,0,0,15,109,1,0,0,0,17,115,1,0,0,0,19,118,1,0,0,0,21,123,
        1,0,0,0,23,125,1,0,0,0,25,132,1,0,0,0,27,140,1,0,0,0,29,144,1,0,
        0,0,31,150,1,0,0,0,33,157,1,0,0,0,35,162,1,0,0,0,37,165,1,0,0,0,
        39,168,1,0,0,0,41,170,1,0,0,0,43,172,1,0,0,0,45,175,1,0,0,0,47,178,
        1,0,0,0,49,181,1,0,0,0,51,184,1,0,0,0,53,187,1,0,0,0,55,190,1,0,
        0,0,57,193,1,0,0,0,59,196,1,0,0,0,61,199,1,0,0,0,63,202,1,0,0,0,
        65,204,1,0,0,0,67,206,1,0,0,0,69,208,1,0,0,0,71,210,1,0,0,0,73,212,
        1,0,0,0,75,223,1,0,0,0,77,237,1,0,0,0,79,245,1,0,0,0,81,258,1,0,
        0,0,83,313,1,0,0,0,85,315,1,0,0,0,87,319,1,0,0,0,89,329,1,0,0,0,
        91,333,1,0,0,0,93,94,5,40,0,0,94,2,1,0,0,0,95,96,5,41,0,0,96,4,1,
        0,0,0,97,98,5,123,0,0,98,6,1,0,0,0,99,100,5,125,0,0,100,8,1,0,0,
        0,101,102,5,61,0,0,102,10,1,0,0,0,103,104,5,59,0,0,104,12,1,0,0,
        0,105,106,5,102,0,0,106,107,5,111,0,0,107,108,5,114,0,0,108,14,1,
        0,0,0,109,110,5,119,0,0,110,111,5,104,0,0,111,112,5,105,0,0,112,
        113,5,108,0,0,113,114,5,101,0,0,114,16,1,0,0,0,115,116,5,105,0,0,
        116,117,5,102,0,0,117,18,1,0,0,0,118,119,5,101,0,0,119,120,5,108,
        0,0,120,121,5,115,0,0,121,122,5,101,0,0,122,20,1,0,0,0,123,124,5,
        44,0,0,124,22,1,0,0,0,125,126,5,114,0,0,126,127,5,101,0,0,127,128,
        5,116,0,0,128,129,5,117,0,0,129,130,5,114,0,0,130,131,5,110,0,0,
        131,24,1,0,0,0,132,133,5,105,0,0,133,134,5,110,0,0,134,135,5,99,
        0,0,135,136,5,108,0,0,136,137,5,117,0,0,137,138,5,100,0,0,138,139,
        5,101,0,0,139,26,1,0,0,0,140,141,5,105,0,0,141,142,5,110,0,0,142,
        143,5,116,0,0,143,28,1,0,0,0,144,145,5,102,0,0,145,146,5,108,0,0,
        146,147,5,111,0,0,147,148,5,97,0,0,148,149,5,116,0,0,149,30,1,0,
        0,0,150,151,5,100,0,0,151,152,5,111,0,0,152,153,5,117,0,0,153,154,
        5,98,0,0,154,155,5,108,0,0,155,156,5,101,0,0,156,32,1,0,0,0,157,
        158,5,118,0,0,158,159,5,111,0,0,159,160,5,105,0,0,160,161,5,100,
        0,0,161,34,1,0,0,0,162,163,5,43,0,0,163,164,5,43,0,0,164,36,1,0,
        0,0,165,166,5,45,0,0,166,167,5,45,0,0,167,38,1,0,0,0,168,169,5,62,
        0,0,169,40,1,0,0,0,170,171,5,60,0,0,171,42,1,0,0,0,172,173,5,60,
        0,0,173,174,5,61,0,0,174,44,1,0,0,0,175,176,5,62,0,0,176,177,5,61,
        0,0,177,46,1,0,0,0,178,179,5,43,0,0,179,180,5,61,0,0,180,48,1,0,
        0,0,181,182,5,45,0,0,182,183,5,61,0,0,183,50,1,0,0,0,184,185,5,42,
        0,0,185,186,5,61,0,0,186,52,1,0,0,0,187,188,5,47,0,0,188,189,5,61,
        0,0,189,54,1,0,0,0,190,191,5,124,0,0,191,192,5,124,0,0,192,56,1,
        0,0,0,193,194,5,38,0,0,194,195,5,38,0,0,195,58,1,0,0,0,196,197,5,
        61,0,0,197,198,5,61,0,0,198,60,1,0,0,0,199,200,5,33,0,0,200,201,
        5,61,0,0,201,62,1,0,0,0,202,203,5,43,0,0,203,64,1,0,0,0,204,205,
        5,45,0,0,205,66,1,0,0,0,206,207,5,42,0,0,207,68,1,0,0,0,208,209,
        5,47,0,0,209,70,1,0,0,0,210,211,5,37,0,0,211,72,1,0,0,0,212,213,
        5,47,0,0,213,214,5,47,0,0,214,218,1,0,0,0,215,217,8,0,0,0,216,215,
        1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,221,
        1,0,0,0,220,218,1,0,0,0,221,222,6,36,0,0,222,74,1,0,0,0,223,224,
        5,47,0,0,224,225,5,42,0,0,225,229,1,0,0,0,226,228,9,0,0,0,227,226,
        1,0,0,0,228,231,1,0,0,0,229,230,1,0,0,0,229,227,1,0,0,0,230,232,
        1,0,0,0,231,229,1,0,0,0,232,233,5,42,0,0,233,234,5,47,0,0,234,235,
        1,0,0,0,235,236,6,37,0,0,236,76,1,0,0,0,237,241,7,1,0,0,238,240,
        7,2,0,0,239,238,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,
        1,0,0,0,242,78,1,0,0,0,243,241,1,0,0,0,244,246,7,3,0,0,245,244,1,
        0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,80,1,0,
        0,0,249,250,5,116,0,0,250,251,5,114,0,0,251,252,5,117,0,0,252,259,
        5,101,0,0,253,254,5,102,0,0,254,255,5,97,0,0,255,256,5,108,0,0,256,
        257,5,115,0,0,257,259,5,101,0,0,258,249,1,0,0,0,258,253,1,0,0,0,
        259,82,1,0,0,0,260,262,7,3,0,0,261,260,1,0,0,0,262,263,1,0,0,0,263,
        261,1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,267,5,46,0,0,266,
        268,7,3,0,0,267,266,1,0,0,0,268,269,1,0,0,0,269,267,1,0,0,0,269,
        270,1,0,0,0,270,280,1,0,0,0,271,273,7,4,0,0,272,274,7,5,0,0,273,
        272,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,277,7,3,0,0,276,
        275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,
        281,1,0,0,0,280,271,1,0,0,0,280,281,1,0,0,0,281,314,1,0,0,0,282,
        284,5,46,0,0,283,285,7,3,0,0,284,283,1,0,0,0,285,286,1,0,0,0,286,
        284,1,0,0,0,286,287,1,0,0,0,287,297,1,0,0,0,288,290,7,4,0,0,289,
        291,7,5,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,
        294,7,3,0,0,293,292,1,0,0,0,294,295,1,0,0,0,295,293,1,0,0,0,295,
        296,1,0,0,0,296,298,1,0,0,0,297,288,1,0,0,0,297,298,1,0,0,0,298,
        314,1,0,0,0,299,301,7,3,0,0,300,299,1,0,0,0,301,302,1,0,0,0,302,
        300,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,306,7,4,0,0,305,
        307,7,5,0,0,306,305,1,0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,
        310,7,3,0,0,309,308,1,0,0,0,310,311,1,0,0,0,311,309,1,0,0,0,311,
        312,1,0,0,0,312,314,1,0,0,0,313,261,1,0,0,0,313,282,1,0,0,0,313,
        300,1,0,0,0,314,84,1,0,0,0,315,316,5,34,0,0,316,317,7,6,0,0,317,
        318,5,34,0,0,318,86,1,0,0,0,319,324,5,34,0,0,320,323,3,89,44,0,321,
        323,8,7,0,0,322,320,1,0,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,
        322,1,0,0,0,324,325,1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,
        328,5,34,0,0,328,88,1,0,0,0,329,330,5,92,0,0,330,331,7,8,0,0,331,
        90,1,0,0,0,332,334,7,9,0,0,333,332,1,0,0,0,334,335,1,0,0,0,335,333,
        1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,338,6,45,0,0,338,92,
        1,0,0,0,22,0,218,229,241,247,258,263,269,273,278,280,286,290,295,
        297,302,306,311,313,322,324,335,1,6,0,0
    ]

class CASSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    SL_COMMENT = 37
    ML_COMMENT = 38
    ID = 39
    INT = 40
    BOOL = 41
    FLOAT = 42
    CHAR = 43
    STRING = 44
    WS = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "'='", "';'", "'for'", "'while'", 
            "'if'", "'else'", "','", "'return'", "'include'", "'int'", "'float'", 
            "'double'", "'void'", "'++'", "'--'", "'>'", "'<'", "'<='", 
            "'>='", "'+='", "'-='", "'*='", "'/='", "'||'", "'&&'", "'=='", 
            "'!='", "'+'", "'-'", "'*'", "'/'", "'%'" ]

    symbolicNames = [ "<INVALID>",
            "SL_COMMENT", "ML_COMMENT", "ID", "INT", "BOOL", "FLOAT", "CHAR", 
            "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "SL_COMMENT", "ML_COMMENT", 
                  "ID", "INT", "BOOL", "FLOAT", "CHAR", "STRING", "ESC_SEQ", 
                  "WS" ]

    grammarFileName = "CASS.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


