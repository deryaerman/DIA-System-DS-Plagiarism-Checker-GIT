# Generated from CASS.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,49,361,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,
        1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,
        1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,
        1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,5,39,237,8,39,10,39,12,39,
        240,9,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,248,8,40,10,40,12,40,
        251,9,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,5,41,260,8,41,10,41,
        12,41,263,9,41,1,42,4,42,266,8,42,11,42,12,42,267,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,3,43,279,8,43,1,44,4,44,282,8,44,11,
        44,12,44,283,1,44,1,44,4,44,288,8,44,11,44,12,44,289,1,44,1,44,3,
        44,294,8,44,1,44,4,44,297,8,44,11,44,12,44,298,3,44,301,8,44,1,44,
        1,44,4,44,305,8,44,11,44,12,44,306,1,44,1,44,3,44,311,8,44,1,44,
        4,44,314,8,44,11,44,12,44,315,3,44,318,8,44,1,44,4,44,321,8,44,11,
        44,12,44,322,1,44,1,44,3,44,327,8,44,1,44,4,44,330,8,44,11,44,12,
        44,331,3,44,334,8,44,1,45,1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,47,
        5,47,345,8,47,10,47,12,47,348,9,47,1,47,1,47,1,48,1,48,1,48,1,49,
        4,49,356,8,49,11,49,12,49,357,1,49,1,49,1,249,0,50,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
        38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
        0,99,49,1,0,10,2,0,10,10,13,13,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,2,
        0,65,90,97,122,2,0,34,34,92,92,8,0,34,34,39,39,92,92,98,98,102,102,
        110,110,114,114,116,116,3,0,9,10,13,13,32,32,381,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
        0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
        0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,
        0,0,0,0,95,1,0,0,0,0,99,1,0,0,0,1,101,1,0,0,0,3,103,1,0,0,0,5,105,
        1,0,0,0,7,107,1,0,0,0,9,109,1,0,0,0,11,111,1,0,0,0,13,113,1,0,0,
        0,15,117,1,0,0,0,17,123,1,0,0,0,19,126,1,0,0,0,21,131,1,0,0,0,23,
        133,1,0,0,0,25,135,1,0,0,0,27,137,1,0,0,0,29,145,1,0,0,0,31,152,
        1,0,0,0,33,160,1,0,0,0,35,164,1,0,0,0,37,170,1,0,0,0,39,177,1,0,
        0,0,41,182,1,0,0,0,43,185,1,0,0,0,45,188,1,0,0,0,47,190,1,0,0,0,
        49,192,1,0,0,0,51,195,1,0,0,0,53,198,1,0,0,0,55,200,1,0,0,0,57,203,
        1,0,0,0,59,206,1,0,0,0,61,209,1,0,0,0,63,212,1,0,0,0,65,215,1,0,
        0,0,67,218,1,0,0,0,69,221,1,0,0,0,71,224,1,0,0,0,73,226,1,0,0,0,
        75,228,1,0,0,0,77,230,1,0,0,0,79,232,1,0,0,0,81,243,1,0,0,0,83,257,
        1,0,0,0,85,265,1,0,0,0,87,278,1,0,0,0,89,333,1,0,0,0,91,335,1,0,
        0,0,93,339,1,0,0,0,95,341,1,0,0,0,97,351,1,0,0,0,99,355,1,0,0,0,
        101,102,5,40,0,0,102,2,1,0,0,0,103,104,5,41,0,0,104,4,1,0,0,0,105,
        106,5,123,0,0,106,6,1,0,0,0,107,108,5,125,0,0,108,8,1,0,0,0,109,
        110,5,61,0,0,110,10,1,0,0,0,111,112,5,59,0,0,112,12,1,0,0,0,113,
        114,5,102,0,0,114,115,5,111,0,0,115,116,5,114,0,0,116,14,1,0,0,0,
        117,118,5,119,0,0,118,119,5,104,0,0,119,120,5,105,0,0,120,121,5,
        108,0,0,121,122,5,101,0,0,122,16,1,0,0,0,123,124,5,105,0,0,124,125,
        5,102,0,0,125,18,1,0,0,0,126,127,5,101,0,0,127,128,5,108,0,0,128,
        129,5,115,0,0,129,130,5,101,0,0,130,20,1,0,0,0,131,132,5,91,0,0,
        132,22,1,0,0,0,133,134,5,93,0,0,134,24,1,0,0,0,135,136,5,44,0,0,
        136,26,1,0,0,0,137,138,5,110,0,0,138,139,5,117,0,0,139,140,5,108,
        0,0,140,141,5,108,0,0,141,142,5,112,0,0,142,143,5,116,0,0,143,144,
        5,114,0,0,144,28,1,0,0,0,145,146,5,114,0,0,146,147,5,101,0,0,147,
        148,5,116,0,0,148,149,5,117,0,0,149,150,5,114,0,0,150,151,5,110,
        0,0,151,30,1,0,0,0,152,153,5,105,0,0,153,154,5,110,0,0,154,155,5,
        99,0,0,155,156,5,108,0,0,156,157,5,117,0,0,157,158,5,100,0,0,158,
        159,5,101,0,0,159,32,1,0,0,0,160,161,5,105,0,0,161,162,5,110,0,0,
        162,163,5,116,0,0,163,34,1,0,0,0,164,165,5,102,0,0,165,166,5,108,
        0,0,166,167,5,111,0,0,167,168,5,97,0,0,168,169,5,116,0,0,169,36,
        1,0,0,0,170,171,5,100,0,0,171,172,5,111,0,0,172,173,5,117,0,0,173,
        174,5,98,0,0,174,175,5,108,0,0,175,176,5,101,0,0,176,38,1,0,0,0,
        177,178,5,118,0,0,178,179,5,111,0,0,179,180,5,105,0,0,180,181,5,
        100,0,0,181,40,1,0,0,0,182,183,5,43,0,0,183,184,5,43,0,0,184,42,
        1,0,0,0,185,186,5,45,0,0,186,187,5,45,0,0,187,44,1,0,0,0,188,189,
        5,62,0,0,189,46,1,0,0,0,190,191,5,60,0,0,191,48,1,0,0,0,192,193,
        5,60,0,0,193,194,5,61,0,0,194,50,1,0,0,0,195,196,5,62,0,0,196,197,
        5,61,0,0,197,52,1,0,0,0,198,199,5,38,0,0,199,54,1,0,0,0,200,201,
        5,43,0,0,201,202,5,61,0,0,202,56,1,0,0,0,203,204,5,45,0,0,204,205,
        5,61,0,0,205,58,1,0,0,0,206,207,5,42,0,0,207,208,5,61,0,0,208,60,
        1,0,0,0,209,210,5,47,0,0,210,211,5,61,0,0,211,62,1,0,0,0,212,213,
        5,124,0,0,213,214,5,124,0,0,214,64,1,0,0,0,215,216,5,38,0,0,216,
        217,5,38,0,0,217,66,1,0,0,0,218,219,5,61,0,0,219,220,5,61,0,0,220,
        68,1,0,0,0,221,222,5,33,0,0,222,223,5,61,0,0,223,70,1,0,0,0,224,
        225,5,43,0,0,225,72,1,0,0,0,226,227,5,45,0,0,227,74,1,0,0,0,228,
        229,5,47,0,0,229,76,1,0,0,0,230,231,5,37,0,0,231,78,1,0,0,0,232,
        233,5,47,0,0,233,234,5,47,0,0,234,238,1,0,0,0,235,237,8,0,0,0,236,
        235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,
        241,1,0,0,0,240,238,1,0,0,0,241,242,6,39,0,0,242,80,1,0,0,0,243,
        244,5,47,0,0,244,245,5,42,0,0,245,249,1,0,0,0,246,248,9,0,0,0,247,
        246,1,0,0,0,248,251,1,0,0,0,249,250,1,0,0,0,249,247,1,0,0,0,250,
        252,1,0,0,0,251,249,1,0,0,0,252,253,5,42,0,0,253,254,5,47,0,0,254,
        255,1,0,0,0,255,256,6,40,0,0,256,82,1,0,0,0,257,261,7,1,0,0,258,
        260,7,2,0,0,259,258,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,
        262,1,0,0,0,262,84,1,0,0,0,263,261,1,0,0,0,264,266,7,3,0,0,265,264,
        1,0,0,0,266,267,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,86,1,
        0,0,0,269,270,5,116,0,0,270,271,5,114,0,0,271,272,5,117,0,0,272,
        279,5,101,0,0,273,274,5,102,0,0,274,275,5,97,0,0,275,276,5,108,0,
        0,276,277,5,115,0,0,277,279,5,101,0,0,278,269,1,0,0,0,278,273,1,
        0,0,0,279,88,1,0,0,0,280,282,7,3,0,0,281,280,1,0,0,0,282,283,1,0,
        0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,287,5,46,
        0,0,286,288,7,3,0,0,287,286,1,0,0,0,288,289,1,0,0,0,289,287,1,0,
        0,0,289,290,1,0,0,0,290,300,1,0,0,0,291,293,7,4,0,0,292,294,7,5,
        0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,296,1,0,0,0,295,297,7,3,
        0,0,296,295,1,0,0,0,297,298,1,0,0,0,298,296,1,0,0,0,298,299,1,0,
        0,0,299,301,1,0,0,0,300,291,1,0,0,0,300,301,1,0,0,0,301,334,1,0,
        0,0,302,304,5,46,0,0,303,305,7,3,0,0,304,303,1,0,0,0,305,306,1,0,
        0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,317,1,0,0,0,308,310,7,4,
        0,0,309,311,7,5,0,0,310,309,1,0,0,0,310,311,1,0,0,0,311,313,1,0,
        0,0,312,314,7,3,0,0,313,312,1,0,0,0,314,315,1,0,0,0,315,313,1,0,
        0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,308,1,0,0,0,317,318,1,0,
        0,0,318,334,1,0,0,0,319,321,7,3,0,0,320,319,1,0,0,0,321,322,1,0,
        0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,324,1,0,0,0,324,326,7,4,
        0,0,325,327,7,5,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,329,1,0,
        0,0,328,330,7,3,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,
        0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,281,1,0,0,0,333,302,1,0,
        0,0,333,320,1,0,0,0,334,90,1,0,0,0,335,336,5,34,0,0,336,337,7,6,
        0,0,337,338,5,34,0,0,338,92,1,0,0,0,339,340,5,42,0,0,340,94,1,0,
        0,0,341,346,5,34,0,0,342,345,3,97,48,0,343,345,8,7,0,0,344,342,1,
        0,0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,347,1,
        0,0,0,347,349,1,0,0,0,348,346,1,0,0,0,349,350,5,34,0,0,350,96,1,
        0,0,0,351,352,5,92,0,0,352,353,7,8,0,0,353,98,1,0,0,0,354,356,7,
        9,0,0,355,354,1,0,0,0,356,357,1,0,0,0,357,355,1,0,0,0,357,358,1,
        0,0,0,358,359,1,0,0,0,359,360,6,49,0,0,360,100,1,0,0,0,22,0,238,
        249,261,267,278,283,289,293,298,300,306,310,315,317,322,326,331,
        333,344,346,357,1,6,0,0
    ]

class CASSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    SL_COMMENT = 40
    ML_COMMENT = 41
    ID = 42
    INT = 43
    BOOL = 44
    FLOAT = 45
    CHAR = 46
    POINTER = 47
    STRING = 48
    WS = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "'='", "';'", "'for'", "'while'", 
            "'if'", "'else'", "'['", "']'", "','", "'nullptr'", "'return'", 
            "'include'", "'int'", "'float'", "'double'", "'void'", "'++'", 
            "'--'", "'>'", "'<'", "'<='", "'>='", "'&'", "'+='", "'-='", 
            "'*='", "'/='", "'||'", "'&&'", "'=='", "'!='", "'+'", "'-'", 
            "'/'", "'%'", "'*'" ]

    symbolicNames = [ "<INVALID>",
            "SL_COMMENT", "ML_COMMENT", "ID", "INT", "BOOL", "FLOAT", "CHAR", 
            "POINTER", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "SL_COMMENT", "ML_COMMENT", "ID", "INT", "BOOL", 
                  "FLOAT", "CHAR", "POINTER", "STRING", "ESC_SEQ", "WS" ]

    grammarFileName = "CASS.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


